type: edu
custom_name: stage3
files:
- name: src/recognition/Main.java
  visible: true
  text: |
    package recognition;
    import java.util.*;

    public class Main {
        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: test/DigitRecognitionTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.*;
    import java.util.List;
    import java.util.stream.Collectors;

    class Clue {
        String answer;
        Clue(int ans) {
            answer = Integer.toString(ans);
        }
    }

    public class DigitRecognitionTest extends StageTest<Clue> {

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                new TestCase<Clue>()
                    .setAttach(new Clue(1))
                    .setInput(
                        "2\n_X_\n" +
                            "_X_\n" +
                            "XX_\n" +
                            "XX_\n" +
                            "_XX\n"),

                new TestCase<Clue>()
                    .setAttach(new Clue(2))
                    .setInput(
                        "2\nXX_\n" +
                            "__X\n" +
                            "__X\n" +
                            "X__\n" +
                            "XXX\n"),

                new TestCase<Clue>()
                    .setAttach(new Clue(7))
                    .setInput(
                        "2\nXXX\n" +
                            "X_X\n" +
                            "__X\n" +
                            "__X\n" +
                            "__X\n"),

                new TestCase<Clue>()
                    .setAttach(new Clue(9))
                    .setInput(
                        "2\nXXX\n" +
                            "X_X\n" +
                            "XXX\n" +
                            "__X\n" +
                            "_XX\n"),

                new TestCase<Clue>()
                    .setAttach(new Clue(0))
                    .setInput(
                        "2\nXXX\n" +
                            "X_X\n" +
                            "X_X\n" +
                            "X_X\n" +
                            "_XX\n"),

                new TestCase<Clue>()
                    .setAttach(new Clue(3))
                    .setInput(
                        "2\nXXX\n" +
                            "__X\n" +
                            "XXX\n" +
                            "__X\n" +
                            "_XX\n"),

                new TestCase<Clue>()
                    .setAttach(new Clue(4))
                    .setInput(
                        "2\nX_X\n" +
                            "__X\n" +
                            "XXX\n" +
                            "__X\n" +
                            "__X\n"),

                new TestCase<Clue>()
                    .setAttach(new Clue(5))
                    .setInput(
                        "2\nXXX\n" +
                            "X__\n" +
                            "XXX\n" +
                            "__X\n" +
                            "XX_\n"),

                new TestCase<Clue>()
                    .setAttach(new Clue(8))
                    .setInput(
                        "2\nXXX\n" +
                            "X_X\n" +
                            "XXX\n" +
                            "X_X\n" +
                            "XX_\n"),

                new TestCase<Clue>()
                    .setAttach(new Clue(6))
                    .setInput(
                        "2\n_XX\n" +
                            "X__\n" +
                            "XXX\n" +
                            "X_X\n" +
                            "XXX\n"),




                new TestCase<Clue>()
                    .setAttach(new Clue(0))
                    .setInput(
                        "2\nXXX\n" +
                            "X_X\n" +
                            "X_X\n" +
                            "X_X\n" +
                            "XXX\n"),

                new TestCase<Clue>()
                    .setAttach(new Clue(1))
                    .setInput(
                        "2\n_X_\n" +
                            "_X_\n" +
                            "_X_\n" +
                            "_X_\n" +
                            "_X_\n"),

                new TestCase<Clue>()
                    .setAttach(new Clue(2))
                    .setInput(
                        "2\nXXX\n" +
                            "__X\n" +
                            "XXX\n" +
                            "X__\n" +
                            "XXX\n"),

                new TestCase<Clue>()
                    .setAttach(new Clue(3))
                    .setInput(
                        "2\nXXX\n" +
                            "__X\n" +
                            "XXX\n" +
                            "__X\n" +
                            "XXX\n"),

                new TestCase<Clue>()
                    .setAttach(new Clue(4))
                    .setInput(
                        "2\nX_X\n" +
                            "X_X\n" +
                            "XXX\n" +
                            "__X\n" +
                            "__X\n"),

                new TestCase<Clue>()
                    .setAttach(new Clue(5))
                    .setInput(
                        "2\nXXX\n" +
                            "X__\n" +
                            "XXX\n" +
                            "__X\n" +
                            "XXX\n"),

                new TestCase<Clue>()
                    .setAttach(new Clue(6))
                    .setInput(
                        "2\nXXX\n" +
                            "X__\n" +
                            "XXX\n" +
                            "X_X\n" +
                            "XXX\n"),

                new TestCase<Clue>()
                    .setAttach(new Clue(7))
                    .setInput(
                        "2\nXXX\n" +
                            "__X\n" +
                            "__X\n" +
                            "__X\n" +
                            "__X\n"),

                new TestCase<Clue>()
                    .setAttach(new Clue(8))
                    .setInput(
                        "2\nXXX\n" +
                            "X_X\n" +
                            "XXX\n" +
                            "X_X\n" +
                            "XXX\n"),

                new TestCase<Clue>()
                    .setAttach(new Clue(9))
                    .setInput(
                        "2\nXXX\n" +
                            "X_X\n" +
                            "XXX\n" +
                            "__X\n" +
                            "XXX\n")

            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {
            List<String> lines = reply.lines().collect(Collectors.toList());

            if (lines.size() < 1) {
                return CheckResult.wrong("Looks like your output is empty!");
            }

            String lastLine = lines.get(lines.size() - 1);

            String[] lastLineWords = lastLine.split("\\s+");

            List<String> foundedNumbers = new ArrayList<>();
            for (String word : lastLineWords) {
                if (word.matches("[0-9]+")) {
                    foundedNumbers.add(word);
                }
            }

            if (foundedNumbers.size() > 1) {
                String numbers = String.join(", ", foundedNumbers);
                return new CheckResult(false,
                    "Last line contains several numbers, " +
                        "you should output only one number.\n" +
                        "Numbers found: " + numbers);
            }

            if (foundedNumbers.size() == 0) {
                return new CheckResult(false,
                    "Last line in output " +
                        "doesn't contain any numbers.");
            }

            String founded = foundedNumbers.get(0);

            if (!founded.equals(clue.answer)) {
                return new CheckResult(false,
                    "Last line contains number " + founded + " " +
                        "but expected to contain number " + clue.answer);
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/recognition/Matrix.java
  visible: true
  text: |
    package recognition;

    import java.util.ArrayList;
    import java.util.List;

    class Matrix {
        /*
        Understanding and Implementing Neural Networks in Java from Scratch ðŸ’»
        https://towardsdatascience.com/understanding-and-implementing-neural-networks-in-java-from-scratch-61421bb6352c
         */

        private final double[][] data;
        private final int rows,cols;

        public Matrix(int rows, int cols) {
            data = new double[rows][cols];
            this.rows = rows;
            this.cols = cols;

            for(int i = 0; i < rows; i++)
                for(int j = 0; j < cols; j++)
                    data[i][j]=Math.random()*2-1;
        }

        public void add(double offset) {
            for(int i = 0; i < rows; i++)
                for(int j = 0; j < cols; j++)
                    this.data[i][j] += offset;
        }

        public void add(Matrix m) {
            if(cols != m.cols || rows != m.rows) return;
            for(int i = 0; i < rows; i++)
                for(int j = 0; j < cols; j++)
                    this.data[i][j] += m.data[i][j];
        }

        public void multiply(double scalar) {
            for(int i = 0; i < rows; i++)
                for(int j = 0; j < cols; j++)
                    this.data[i][j] *= scalar;
        }

        public void multiply(Matrix a) {
            for(int i = 0; i < a.rows; i++)
                for(int j = 0; j < a.cols; j++)
                    this.data[i][j] *= a.data[i][j];
        }

        public static Matrix fromArrayList(List<Double> list) {
            Matrix temp = new Matrix(list.size(),1);
            for(int i = 0; i < list.size(); i++)
                temp.data[i][0] = list.get(i);
            return temp;

        }

        public List<Double> toArrayList() {
            List<Double> list = new ArrayList<>();

            for(int i = 0; i < rows; i++)
                for(int j = 0; j < cols; j++)
                    list.add(data[i][j]);

            return list;
        }

        public static Matrix add(Matrix a, Matrix b) {
            Matrix temp = new Matrix(a.rows, a.cols);

            for(int i = 0; i < a.rows; i++)
                for(int j = 0; j < a.cols; j++)
                    temp.data[i][j] = a.data[i][j] + b.data[i][j];

            return temp;
        }

        public static Matrix multiply(Matrix a, Matrix b) {
            Matrix temp = new Matrix(a.rows, b.cols);
            for(int i = 0; i< temp.rows; i++) {
                for (int j = 0; j < temp.cols; j++) {
                    double sum = 0;
                    for (int k = 0; k < a.cols; k++) {
                        sum += a.data[i][k] * b.data[k][j];
                    }
                    temp.data[i][j] = sum;
                }
            }
            return temp;
        }

        public static Matrix transpose(Matrix a) {
            Matrix temp = new Matrix(a.cols, a.rows);

            for(int i = 0; i < a.rows; i++)
                for(int j = 0; j < a.cols; j++)
                    temp.data[j][i] = a.data[i][j];

            return temp;
        }

        /*
            NEURAL NETWORK HELPERS
         */

        public void sigmoid() {
            for(int i = 0; i < rows; i++)
                for(int j = 0; j < cols; j++)
                    this.data[i][j] = 1 / (1 + Math.exp(-this.data[i][j]));
        }

        public Matrix dSigmoid() {
            Matrix temp = new Matrix(rows, cols);

            for(int i = 0; i < rows; i++)
                for(int j = 0; j < cols; j++)
                    temp.data[i][j] = this.data[i][j] * (1 - this.data[i][j]);

            return temp;
        }
    }
  learner_created: true
- name: src/recognition/NeuralNetwork.java
  visible: true
  learner_created: true
- name: src/recognition/Menu.java
  visible: true
  learner_created: true
- name: src/recognition/LearningData.java
  visible: true
  learner_created: true
- name: src/recognition/Command.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/51/stages/279/implement#comment
status: Unchecked
record: -1
