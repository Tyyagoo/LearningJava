type: edu
files:
- name: src/client/Main.java
  visible: true
  text: |
    package client;

    public class Main {

        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: src/server/Main.java
  visible: true
  text: |
    package server;

    public class Main {

        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/JsonFinder.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;

    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class JsonFinder {

        private static final Pattern pattern = Pattern.compile("\\{.+}");

        public static String findRequestJsonObject(String output) {

            Matcher matcher = pattern.matcher(output);

            while (matcher.find()) {
                String json = matcher.group();
                if (json.contains("type")) {
                    return json;
                }
            }

            throw new WrongAnswer("Can't find request JSON object in the output.\n" +
                    "It should contain 'type' key");
        }

        public static String findResponseJsonObject(String output) {

            Matcher matcher = pattern.matcher(output);

            while (matcher.find()) {
                String json = matcher.group();
                if (json.contains("response")) {
                    return json;
                }
            }

            throw new WrongAnswer("Can't find request JSON object in the output.\n" +
                    "It should contain 'response' key");
        }
    }
  learner_created: false
- name: test/JsonDatabaseTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isObject;

    public class JsonDatabaseTest extends StageTest<String> {

        private static final String OK_STATUS = "OK";
        private static final String ERROR_STATUS = "ERROR";
        private static final String NO_SUCH_KEY_REASON = "No such key";
        private static final String WRONG_EXIT = "The server should stop when client sends 'exit' request";

        @DynamicTestingMethod
        CheckResult checkExit() {

            TestedProgram server = getServer();
            server.startInBackground();

            TestedProgram client = getClient();
            client.start("-t", "exit");

            try {
                Thread.sleep(50);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            if (!server.isFinished()) {
                server.stop();
                return CheckResult.wrong(WRONG_EXIT);
            }

            return CheckResult.correct();
        }

        @DynamicTestingMethod
        CheckResult testInputs() {

            TestedProgram server = getServer();
            server.startInBackground();

            TestedProgram client;
            String output;
            String expectedValue;

            client = getClient();
            output = client.start("-t", "get", "-k", "1");

            String requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "1")
                );
            String responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "set", "-k", "1", "-v", "Hello world!");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "set")
                    .value("key", "1")
                    .value("value", "Hello world!")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );


            client = getClient();
            output = client.start("-t", "set", "-k", "1", "-v", "HelloWorld!");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "set")
                    .value("key", "1")
                    .value("value", "HelloWorld!")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );


            client = getClient();
            output = client.start("-t", "get", "-k", "1");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "1")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                    .value("value", "HelloWorld!")
                );


            client = getClient();
            output = client.start("-t", "delete", "-k", "1");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "1")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );


            client = getClient();
            output = client.start("-t", "delete", "-k", "1");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "1")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "get", "-k", "1");
            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "1")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "set", "-k", "text", "-v", "Some text here");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "set")
                    .value("key", "text")
                    .value("value", "Some text here")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );


            client = getClient();
            output = client.start("-t", "get", "-k", "text");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "text")
                );
            expectedValue = "Some text here";
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                    .value("value", expectedValue)
                );


            client = getClient();
            output = client.start("-t", "get", "-k", "56");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "56")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "delete", "-k", "56");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "56")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "delete", "-k", "100");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "100")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );

            client = getClient();
            output = client.start("-t", "delete", "-k", "That key doesn't exist");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "That key doesn't exist")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            client.start("-t", "exit");

            return CheckResult.correct();
        }

        private static TestedProgram getClient() {
            return new TestedProgram("client");
        }

        private static TestedProgram getServer() {
            return new TestedProgram("server");
        }

    }
  learner_created: false
- name: src/exceptions/InvalidDatabaseAccessException.java
  visible: true
  text: |
    package exceptions;

    public class InvalidDatabaseAccessException extends RuntimeException {
        public InvalidDatabaseAccessException() {
            super("ERROR", null);
        }
    }
  learner_created: true
- name: src/server/commands/Controller.java
  visible: true
  text: |
    package server.commands;

    import server.commands.list.*;
    import server.database.Database;

    public class Controller {

        private ICommand command;
        private final Database database;

        public Controller(Database db) {
            this.database = db;
        }

        public String invoke(String cmd) {
            fetch(cmd);
            executeCommand();
            return getCommandResult();
        }

        public void fetch(String cmd) {
            String[] tokens = cmd.split(" ");
            switch (tokens[0]) {
                case "get":
                    this.command = new GetCommand(database, Integer.parseInt(tokens[1]));
                    break;
                case "delete":
                    this.command = new DeleteCommand(database, Integer.parseInt(tokens[1]));
                    break;
                case "set":
                    StringBuilder textBuilder = new StringBuilder();
                    for (int i = 2; i < tokens.length; i++) {
                        textBuilder.append(tokens[i]);
                        textBuilder.append(" ");
                    }
                    this.command = new SetCommand(database, Integer.parseInt(tokens[1]), textBuilder.toString());
                    break;
                default:
                    this.command = new ExitCommand();
            }
        }

        public void executeCommand() {
            command.execute();
        }

        public String getCommandResult() {
            return command.getResult();
        }
    }
  learner_created: true
- name: src/server/commands/ICommand.java
  visible: true
  text: |
    package server.commands;

    public interface ICommand {
        void execute();
        String getResult();
    }
  learner_created: true
- name: src/server/commands/list/ExitCommand.java
  visible: true
  text: |
    package server.commands.list;

    import server.commands.ICommand;

    public class ExitCommand implements ICommand {

        @Override
        public void execute() {

        }

        @Override
        public String getResult() {
            return null;
        }
    }
  learner_created: true
- name: src/server/commands/list/GetCommand.java
  visible: true
  text: |+
    package server.commands.list;

    import server.commands.ICommand;
    import server.database.Database;

    public class GetCommand implements ICommand {
        private final int position;
        private final Database database;
        private String result = "unknown";

        public GetCommand(Database db, int pos) {
            this.database = db;
            this.position = pos;
        }

        @Override
        public void execute() {
            result = database.get(position);
        }

        @Override
        public String getResult() {
            return result;
        }
    }

  learner_created: true
- name: src/server/commands/list/DeleteCommand.java
  visible: true
  text: |
    package server.commands.list;

    import server.commands.ICommand;
    import server.database.Database;

    public class DeleteCommand implements ICommand {
        private final int position;
        private final Database database;

        public DeleteCommand(Database db, int pos) {
            this.database = db;
            this.position = pos;
        }

        @Override
        public void execute() {
            database.delete(position);
        }

        @Override
        public String getResult() {
            return "OK";
        }
    }
  learner_created: true
- name: src/server/commands/list/SetCommand.java
  visible: true
  text: |
    package server.commands.list;

    import server.commands.ICommand;
    import server.database.Database;

    public class SetCommand implements ICommand {
        private final int position;
        private final String text;
        private final Database database;

        public SetCommand(Database db, int pos, String txt) {
            this.database = db;
            this.text = txt;
            this.position = pos;
        }

        @Override
        public void execute() {
            database.set(position, text);
        }

        @Override
        public String getResult() {
            return "OK";
        }
    }
  learner_created: true
- name: src/server/database/Database.java
  visible: true
  text: "package server.database;\n\nimport exceptions.InvalidDatabaseAccessException;\n\
    \nimport java.util.Arrays;\n\npublic class Database {\n    private String[] db;\n\
    \n    public Database() {\n        this.db =  new String[1000];\n        Arrays.fill(db,\
    \ \"\");\n    }\n\n    public void set(int position, String content) {\n     \
    \   checkPosition(position);\n        db[position - 1] = content;\n    }\n\n \
    \   public String get(int position) {\n        checkPosition(position);\n    \
    \    if (\"\".equals(db[position - 1])) throw new InvalidDatabaseAccessException();\n\
    \        return db[position - 1];\n    }\n    \n    public void delete(int position)\
    \ {\n        checkPosition(position);\n        db[position - 1] = \"\";\n    }\n\
    \n    private void checkPosition(int position) {\n        if (position < 1 ||\
    \ position > 100) throw new InvalidDatabaseAccessException();\n    }\n\n}\n"
  learner_created: true
feedback_link: https://hyperskill.org/projects/65/stages/351/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 24 Jul 2021 22:51:13 UTC
record: 4
