type: edu
files:
- name: src/client/Main.java
  visible: true
  text: |
    package client;

    public class Main {

        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: src/server/Main.java
  visible: true
  text: |
    package server;

    public class Main {

        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/JsonDatabaseTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    public class JsonDatabaseTest extends StageTest<String> {

        private static final String OK_STATUS = "OK";
        private static final String ERROR_STATUS = "ERROR";

        private static final String WRONG_EXIT = "The server should stop when client sends 'exit' request";
        private static final String WRONG_GET_EMPTY_CELL_WITH_ERROR = "When a client tries to get an empty cell from " +
                "the server, the server should response with 'ERROR' and the client should print that response";
        private static final String WRONG_SET_VALUE_TO_CELL_WITH_OK = "When a client tries to save a value on" +
                " the server, the server should save the value and response with '" + OK_STATUS + "'. The client should " +
                "print that response";
        private static final String WRONG_GET_VALUE = "When a client tries to get a not empty cell from the server, " +
                "the server should response with a value of the cell. The client should pint received value.\n" +
                "May be the problem is in processing 'set' action:\nIf the specified cell already contains " +
                "information, you should simply rewrite it.";
        private static final String WRONG_DELETE = "When a client tries to delete a value from the cell on the server," +
                " the server should assign an empty string to this cell and response with '" + OK_STATUS + "'.";
        private static final String WRONG_DELETE_EMPTY = "When a client tries to delete a cell with an empty value from the server," +
                " the server should assign an empty string to this cell and response with '" + OK_STATUS + "'.";
        private static final String WRONG_DELETE_INDEX_OUT_OF_BOUNDS = "When a user tries to delete a cell which index " +
                "is less than 0 or greater than 1000, the server should response with  '" + ERROR_STATUS + "'.";

        @DynamicTestingMethod
        CheckResult checkExit() {

            TestedProgram server = getServer();
            server.startInBackground();

            TestedProgram client = getClient();
            client.start("-t", "exit");

            try {
                Thread.sleep(50);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            if (!server.isFinished()) {
                server.stop();
                return CheckResult.wrong(WRONG_EXIT);
            }

            return CheckResult.correct();
        }

        @DynamicTestingMethod
        CheckResult testInputs() {

            TestedProgram server = getServer();
            server.startInBackground();

            TestedProgram client;
            String output;
            String expectedValue;

            client = getClient();
            output = client.start("-t", "get", "-i", "1");
            if (!output.toUpperCase().contains(ERROR_STATUS)) {
                return CheckResult.wrong(WRONG_GET_EMPTY_CELL_WITH_ERROR);
            }

            client = getClient();
            output = client.start("-t", "set", "-i", "1", "-m", "Hello world!");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_SET_VALUE_TO_CELL_WITH_OK);
            }

            client = getClient();
            output = client.start("-t", "set", "-i", "1", "-m", "HelloWorld!");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_SET_VALUE_TO_CELL_WITH_OK);
            }

            client = getClient();
            output = client.start("-t", "get", "-i", "1");
            expectedValue = "HelloWorld!";
            if (!output.contains(expectedValue)) {
                return CheckResult.wrong(WRONG_GET_VALUE +
                        "\nExpected:\n" + expectedValue + "\nYour output:\n" + output);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "1");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "1");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE_EMPTY);
            }

            client = getClient();
            output = client.start("-t", "get", "-i", "1");
            if (!output.toUpperCase().contains(ERROR_STATUS)) {
                return CheckResult.wrong(WRONG_GET_EMPTY_CELL_WITH_ERROR + "\nMay be after deleting a cell you didn't " +
                        "assign an empty value to it.");
            }

            client = getClient();
            output = client.start("-t", "set", "-i", "55", "-m", "Some text here");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_SET_VALUE_TO_CELL_WITH_OK);
            }

            client = getClient();
            output = client.start("-t", "get", "-i", "55");
            expectedValue = "Some text here";
            if (!output.contains(expectedValue)) {
                return CheckResult.wrong(WRONG_GET_VALUE +
                        "\nExpected:\n" + expectedValue + "\nYour output:\n" + output);
            }

            client = getClient();
            output = client.start("-t", "get", "-i", "56");
            if (!output.toUpperCase().contains(ERROR_STATUS)) {
                return CheckResult.wrong(WRONG_GET_EMPTY_CELL_WITH_ERROR);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "55");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "56");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE_EMPTY);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "100");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE_EMPTY);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "1001");
            if (!output.toUpperCase().contains(ERROR_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE_INDEX_OUT_OF_BOUNDS);
            }

            client = getClient();
            client.start("-t", "exit");

            return CheckResult.correct();
        }


        private static TestedProgram getClient() {
            return new TestedProgram("client");
        }

        private static TestedProgram getServer() {
            return new TestedProgram("server");
        }

        private static void stopServer() {
            TestedProgram client = getClient();
            client.start("-t", "exit");
        }
    }
  learner_created: false
- name: src/exceptions/InvalidDatabaseAccessException.java
  visible: true
  text: |
    package exceptions;

    public class InvalidDatabaseAccessException extends RuntimeException {
        public InvalidDatabaseAccessException() {
            super("ERROR", null);
        }
    }
  learner_created: true
- name: src/server/console/Console.java
  visible: true
  text: |
    package server.console;

    import java.util.Scanner;

    public class Console {
        private static final Scanner scanner = new Scanner(System.in);

        private Console() {
            throw new UnsupportedOperationException();
        }

        /*
        INPUT
         */
        public static String getLine() {
            return scanner.nextLine();
        }

        /*
        OUTPUT
         */

        public static void println(String text) {
            System.out.println(text);
        }

        public static void printf(String text, Object ... args) {
            System.out.printf(text, args);
        }

        public static void print(String text, Object ... args) {
            printf(text + "%n", args);
        }

        /*
        GETTERS
         */

        public static Scanner getScanner() {
            return scanner;
        }
    }
  learner_created: true
- name: src/server/console/UserInterface.java
  visible: true
  text: |
    package server.console;

    import server.database.Database;

    public class UserInterface {

        private static Database database = null;
        private static boolean running = true;

        private static Command exitCommand = args -> running = false;

        private static Command setCommand = args -> {
            int position = Integer.parseInt(args[0]);
            database.set(position, args[1]);
            Console.println("OK");
        };

        private static Command getCommand = args -> {
            int position = Integer.parseInt(args[0]);
            String output = database.get(position);
            Console.println(output);
        };

        private static Command deleteCommand = args -> {
            int position = Integer.parseInt(args[0]);
            database.delete(position);
            Console.println("OK");
        };

        public static void invoke() {
            String input = Console.getLine();
            String[] args = input.split(" ");
            switch(args[0]) {
                case "get":
                    getCommand.execute(args[1]);
                    break;
                case "set":
                    StringBuilder stringBuilder = new StringBuilder();
                    for (int i = 2; i < args.length; i++) {
                        stringBuilder.append(args[i]);
                        stringBuilder.append(" ");
                    }
                    setCommand.execute(args[1], stringBuilder.toString());
                    break;
                case "delete":
                    deleteCommand.execute(args[1]);
                    break;
                default:
                    exitCommand.execute();
                    break;
            }
        }

        public static boolean isRunning() {
            return running;
        }

        public static void setDatabase(Database db) {
            database = db;
        }
    }
  learner_created: true
- name: src/server/console/Command.java
  visible: true
  text: |
    package server.console;

    public interface Command {
        void execute(String ... args);
    }
  learner_created: true
- name: src/server/database/Database.java
  visible: true
  text: "package server.database;\n\nimport exceptions.InvalidDatabaseAccessException;\n\
    \nimport java.util.Arrays;\n\npublic class Database {\n    private String[] db;\n\
    \n    public Database() {\n        this.db =  new String[100];\n        Arrays.fill(db,\
    \ \"\");\n    }\n\n    public void set(int position, String content) {\n     \
    \   checkPosition(position);\n        db[position - 1] = content;\n    }\n\n \
    \   public String get(int position) {\n        checkPosition(position);\n    \
    \    if (\"\".equals(db[position - 1])) throw new InvalidDatabaseAccessException();\n\
    \        return db[position - 1];\n    }\n    \n    public void delete(int position)\
    \ {\n        checkPosition(position);\n        db[position - 1] = \"\";\n    }\n\
    \n    private void checkPosition(int position) {\n        if (position < 1 ||\
    \ position > 100) throw new InvalidDatabaseAccessException();\n    }\n\n}\n"
  learner_created: true
feedback_link: https://hyperskill.org/projects/65/stages/350/implement#comment
status: Unchecked
record: -1
