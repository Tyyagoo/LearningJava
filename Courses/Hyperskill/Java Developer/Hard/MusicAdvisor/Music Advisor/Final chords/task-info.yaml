type: edu
custom_name: stage5
files:
- name: src/advisor/Main.java
  visible: true
  text: |
    package advisor;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    apply plugin: 'java'
    apply plugin: 'application'

    group 'advisor'
    version '1.0-SNAPSHOT'

    sourceCompatibility = 11
    mainClassName = 'advisor.Main'

    repositories {
        mavenCentral()
    }

    dependencies {
        implementation 'com.google.code.gson:gson:+'
    }

    jar {
        manifest {
            attributes 'Main-Class' : 'advisor.Main'
        }
        from {
            configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
        }
    }
  learner_created: false
- name: test/MockTokenServer.java
  visible: false
  text: |
    import org.hyperskill.hstest.mocks.web.WebServerMock;

    public class MockTokenServer extends Thread {

        WebServerMock accessServer;

        public MockTokenServer (WebServerMock accessServer) {
            this.accessServer = accessServer;
        }

        @Override
        public void run() {
            accessServer.start();
            accessServer.run();
        }

        public void stopMock() {
            interrupt();
        }
    }
  learner_created: false
- name: test/MusicAdvisorTest.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.WebServerMock;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.junit.AfterClass;

    import java.awt.desktop.QuitStrategy;

    public class MusicAdvisorTest extends StageTest<String> {

        private static final String fictiveAuthCode = "123123";
        private static final String fictiveAccessToken = "456456";
        private static final String fictiveRefreshToken = "567567";


        private static final int accessServerPort = 45678;
        private static final int resourceServerPort = 56789;

        private static final String accessServerUrl = "http://127.0.0.1:" + accessServerPort;
        private static final String resourceServerUrl = "http://127.0.0.1:" + resourceServerPort;

        private static final String[] arguments = new String[]{
                "-access",
                accessServerUrl,
                "-resource",
                resourceServerUrl,
                "-page",
                "1"
        };

        private static final String tokenResponse = "{" +
                "\"access_token\":\"" + fictiveAccessToken + "\"," +
                "\"token_type\":\"Bearer\"," +
                "\"expires_in\":3600," +
                "\"refresh_token\":" + "\"" + fictiveRefreshToken + "\"," +
                "\"scope\":\"\"" +
                "}";

        // TODO handle auth code argument to get the token.
        private static final WebServerMock accessServer = new WebServerMock(accessServerPort)
                .setPage("/api/token", tokenResponse);


        private static final String spotifyServerUrl = "https://api\\.spotify\\.com";

        private static final String apiCategoriesResponse = "{\n" +
                "    \"categories\": {\n" +
                "        \"href\": \"https://api.spotify.com/v1/browse/categories?offset=0&limit=20\",\n" +
                "        \"items\": [\n" +
                "            {\n" +
                "                \"href\": \"https://api.spotify.com/v1/browse/categories/toplists\",\n" +
                "                \"icons\": [\n" +
                "                    {\n" +
                "                        \"height\": 275,\n" +
                "                        \"url\": \"https://datsnxq1rwndn.cloudfront.net/media/derived/toplists_11160599e6a04ac5d6f2757f5511778f_0_0_275_275.jpg\",\n" +
                "                        \"width\": 275\n" +
                "                    }\n" +
                "                ],\n" +
                "                \"id\": \"toplists\",\n" +
                "                \"name\": \"Top Lists\"\n" +
                "            },\n" +
                "            {\n" +
                "                \"href\": \"https://api.spotify.com/v1/browse/categories/mood\",\n" +
                "                \"icons\": [\n" +
                "                    {\n" +
                "                        \"height\": 274,\n" +
                "                        \"url\": \"https://datsnxq1rwndn.cloudfront.net/media/original/mood-274x274_976986a31ac8c49794cbdc7246fd5ad7_274x274.jpg\",\n" +
                "                        \"width\": 274\n" +
                "                    }\n" +
                "                ],\n" +
                "                \"id\": \"mood\",\n" +
                "                \"name\": \"Super Mood\"\n" +
                "            },\n" +
                "            {\n" +
                "                \"href\": \"https://api.spotify.com/v1/browse/categories/party\",\n" +
                "                \"icons\": [\n" +
                "                    {\n" +
                "                        \"height\": 274,\n" +
                "                        \"url\": \"https://datsnxq1rwndn.cloudfront.net/media/derived/party-274x274_73d1907a7371c3bb96a288390a96ee27_0_0_274_274.jpg\",\n" +
                "                        \"width\": 274\n" +
                "                    }\n" +
                "                ],\n" +
                "                \"id\": \"party\",\n" +
                "                \"name\": \"Party Time\"\n" +
                "            }\n" +
                "        ],\n" +
                "        \"limit\": 20,\n" +
                "        \"next\": null,\n" +
                "        \"offset\": 0,\n" +
                "        \"previous\": null,\n" +
                "        \"total\": 3\n" +
                "    }\n" +
                "}".replaceAll(spotifyServerUrl, resourceServerUrl);


        private static final String apiPlaylistsPartyResponse = "{\n" +
                "    \"playlists\": {\n" +
                "        \"href\": \"https://api.spotify.com/v1/browse/categories/party/playlists?offset=0&limit=20\",\n" +
                "        \"items\": [\n" +
                "            {\n" +
                "                \"collaborative\": false,\n" +
                "                \"external_urls\": {\n" +
                "                    \"spotify\": \"http://open.spotify.com/user/spotifybrazilian/playlist/4k7EZPI3uKMz4aRRrLVfen\"\n" +
                "                },\n" +
                "                \"href\": \"https://api.spotify.com/v1/users/spotifybrazilian/playlists/4k7EZPI3uKMz4aRRrLVfen\",\n" +
                "                \"id\": \"4k7EZPI3uKMz4aRRrLVfen\",\n" +
                "                \"images\": [\n" +
                "                    {\n" +
                "                        \"height\": 300,\n" +
                "                        \"url\": \"https://i.scdn.co/image/bf6544c213532e9650088dfef76c8521093d970e\",\n" +
                "                        \"width\": 300\n" +
                "                    }\n" +
                "                ],\n" +
                "                \"name\": \"Noite Eletronica\",\n" +
                "                \"owner\": {\n" +
                "                    \"external_urls\": {\n" +
                "                        \"spotify\": \"http://open.spotify.com/user/spotifybrazilian\"\n" +
                "                    },\n" +
                "                    \"href\": \"https://api.spotify.com/v1/users/spotifybrazilian\",\n" +
                "                    \"id\": \"spotifybrazilian\",\n" +
                "                    \"type\": \"user\",\n" +
                "                    \"uri\": \"spotify:user:spotifybrazilian\"\n" +
                "                },\n" +
                "                \"public\": null,\n" +
                "                \"snapshot_id\": \"PULvu1V2Ps8lzCxNXfNZTw4QbhBpaV0ZORc03Mw6oj6kQw9Ks2REwhL5Xcw/74wL\",\n" +
                "                \"tracks\": {\n" +
                "                    \"href\": \"https://api.spotify.com/v1/users/spotifybrazilian/playlists/4k7EZPI3uKMz4aRRrLVfen/tracks\",\n" +
                "                    \"total\": 100\n" +
                "                },\n" +
                "                \"type\": \"playlist\",\n" +
                "                \"uri\": \"spotify:user:spotifybrazilian:playlist:4k7EZPI3uKMz4aRRrLVfen\"\n" +
                "            },\n" +
                "            {\n" +
                "                \"collaborative\": false,\n" +
                "                \"external_urls\": {\n" +
                "                    \"spotify\": \"http://open.spotify.com/user/spotifybrazilian/playlist/4HZh0C9y80GzHDbHZyX770\"\n" +
                "                },\n" +
                "                \"href\": \"https://api.spotify.com/v1/users/spotifybrazilian/playlists/4HZh0C9y80GzHDbHZyX770\",\n" +
                "                \"id\": \"4HZh0C9y80GzHDbHZyX770\",\n" +
                "                \"images\": [\n" +
                "                    {\n" +
                "                        \"height\": 300,\n" +
                "                        \"url\": \"https://i.scdn.co/image/be6c333146674440123073cb32c1c8b851e69023\",\n" +
                "                        \"width\": 300\n" +
                "                    }\n" +
                "                ],\n" +
                "                \"name\": \"Festa Indie\",\n" +
                "                \"owner\": {\n" +
                "                    \"external_urls\": {\n" +
                "                        \"spotify\": \"http://open.spotify.com/user/spotifybrazilian\"\n" +
                "                    },\n" +
                "                    \"href\": \"https://api.spotify.com/v1/users/spotifybrazilian\",\n" +
                "                    \"id\": \"spotifybrazilian\",\n" +
                "                    \"type\": \"user\",\n" +
                "                    \"uri\": \"spotify:user:spotifybrazilian\"\n" +
                "                },\n" +
                "                \"public\": null,\n" +
                "                \"snapshot_id\": \"V66hh9k2HnLCdzHvtoXPv+tm0jp3ODM63SZ0oISfGnlHQxwG/scupDbKgIo99Zfz\",\n" +
                "                \"tracks\": {\n" +
                "                    \"href\": \"https://api.spotify.com/v1/users/spotifybrazilian/playlists/4HZh0C9y80GzHDbHZyX770/tracks\",\n" +
                "                    \"total\": 74\n" +
                "                },\n" +
                "                \"type\": \"playlist\",\n" +
                "                \"uri\": \"spotify:user:spotifybrazilian:playlist:4HZh0C9y80GzHDbHZyX770\"\n" +
                "            }\n" +
                "        ],\n" +
                "        \"limit\": 20,\n" +
                "        \"next\": null,\n" +
                "        \"offset\": 0,\n" +
                "        \"previous\": null,\n" +
                "        \"total\": 2\n" +
                "    }\n" +
                "}".replaceAll(spotifyServerUrl, resourceServerUrl);

        private static final String testErrorMessage = "Test unpredictable error message";

        private static final String apiTestErrorResponse = "{\"error\":{\"status\":404,\"message\":\"" + testErrorMessage + "\"}}";

        private static final String apiNewReleasesResponse = "{\n" +
                "    \"albums\": {\n" +
                "        \"href\": \"https://api.spotify.com/v1/browse/new-releases?offset=0&limit=20\",\n" +
                "        \"items\": [\n" +
                "            {\n" +
                "                \"album_type\": \"single\",\n" +
                "                \"artists\": [\n" +
                "                    {\n" +
                "                        \"external_urls\": {\n" +
                "                            \"spotify\": \"https://open.spotify.com/artist/2RdwBSPQiwcmiDo9kixcl8\"\n" +
                "                        },\n" +
                "                        \"href\": \"https://api.spotify.com/v1/artists/2RdwBSPQiwcmiDo9kixcl8\",\n" +
                "                        \"id\": \"2RdwBSPQiwcmiDo9kixcl8\",\n" +
                "                        \"name\": \"Pharrell Williams\",\n" +
                "                        \"type\": \"artist\",\n" +
                "                        \"uri\": \"spotify:artist:2RdwBSPQiwcmiDo9kixcl8\"\n" +
                "                    }\n" +
                "                ],\n" +
                "                \"available_markets\": [\n" +
                "                    \"AD\"\n" +
                "                ],\n" +
                "                \"external_urls\": {\n" +
                "                    \"spotify\": \"https://open.spotify.com/album/5ZX4m5aVSmWQ5iHAPQpT71\"\n" +
                "                },\n" +
                "                \"href\": \"https://api.spotify.com/v1/albums/5ZX4m5aVSmWQ5iHAPQpT71\",\n" +
                "                \"id\": \"5ZX4m5aVSmWQ5iHAPQpT71\",\n" +
                "                \"images\": [\n" +
                "                    {\n" +
                "                        \"height\": 640,\n" +
                "                        \"url\": \"https://i.scdn.co/image/e6b635ebe3ef4ba22492f5698a7b5d417f78b88a\",\n" +
                "                        \"width\": 640\n" +
                "                    },\n" +
                "                    {\n" +
                "                        \"height\": 300,\n" +
                "                        \"url\": \"https://i.scdn.co/image/92ae5b0fe64870c09004dd2e745a4fb1bf7de39d\",\n" +
                "                        \"width\": 300\n" +
                "                    },\n" +
                "                    {\n" +
                "                        \"height\": 64,\n" +
                "                        \"url\": \"https://i.scdn.co/image/8a7ab6fc2c9f678308ba0f694ecd5718dc6bc930\",\n" +
                "                        \"width\": 64\n" +
                "                    }\n" +
                "                ],\n" +
                "                \"name\": \"Runnin'\",\n" +
                "                \"type\": \"album\",\n" +
                "                \"uri\": \"spotify:album:5ZX4m5aVSmWQ5iHAPQpT71\"\n" +
                "            },\n" +
                "            {\n" +
                "                \"album_type\": \"single\",\n" +
                "                \"artists\": [\n" +
                "                    {\n" +
                "                        \"external_urls\": {\n" +
                "                            \"spotify\": \"https://open.spotify.com/artist/3TVXtAsR1Inumwj472S9r4\"\n" +
                "                        },\n" +
                "                        \"href\": \"https://api.spotify.com/v1/artists/3TVXtAsR1Inumwj472S9r4\",\n" +
                "                        \"id\": \"3TVXtAsR1Inumwj472S9r4\",\n" +
                "                        \"name\": \"Drake2\",\n" +
                "                        \"type\": \"artist\",\n" +
                "                        \"uri\": \"spotify:artist:3TVXtAsR1Inumwj472S9r4\"\n" +
                "                    }\n" +
                "                ],\n" +
                "                \"available_markets\": [\n" +
                "                    \"AD\"\n" +
                "                ],\n" +
                "                \"external_urls\": {\n" +
                "                    \"spotify\": \"https://open.spotify.com/album/0geTzdk2InlqIoB16fW9Nd\"\n" +
                "                },\n" +
                "                \"href\": \"https://api.spotify.com/v1/albums/0geTzdk2InlqIoB16fW9Nd\",\n" +
                "                \"id\": \"0geTzdk2InlqIoB16fW9Nd\",\n" +
                "                \"images\": [\n" +
                "                    {\n" +
                "                        \"height\": 640,\n" +
                "                        \"url\": \"https://i.scdn.co/image/d40e9c3d22bde2fbdb2ecc03cccd7a0e77f42e4c\",\n" +
                "                        \"width\": 640\n" +
                "                    },\n" +
                "                    {\n" +
                "                        \"height\": 300,\n" +
                "                        \"url\": \"https://i.scdn.co/image/dff06a3375f6d9b32ecb081eb9a60bbafecb5731\",\n" +
                "                        \"width\": 300\n" +
                "                    },\n" +
                "                    {\n" +
                "                        \"height\": 64,\n" +
                "                        \"url\": \"https://i.scdn.co/image/808a02bd7fc59b0652c9df9f68675edbffe07a79\",\n" +
                "                        \"width\": 64\n" +
                "                    }\n" +
                "                ],\n" +
                "                \"name\": \"Sneakin'\",\n" +
                "                \"type\": \"album\",\n" +
                "                \"uri\": \"spotify:album:0geTzdk2InlqIoB16fW9Nd\"\n" +
                "            }\n" +
                "        ],\n" +
                "        \"limit\": 20,\n" +
                "        \"next\": null,\n" +
                "        \"offset\": 0,\n" +
                "        \"previous\": null,\n" +
                "        \"total\": 2\n" +
                "    }\n" +
                "}".replaceAll(spotifyServerUrl, resourceServerUrl);


        private static final String apiFeaturedPlaylistsResponse = "{\n" +
                "    \"message\": \"Monday morning music, coming right up!\",\n" +
                "    \"playlists\": {\n" +
                "        \"href\": \"https://api.spotify.com/v1/browse/featured-playlists?offset=0&limit=20\",\n" +
                "        \"items\": [\n" +
                "            {\n" +
                "                \"collaborative\": false,\n" +
                "                \"external_urls\": {\n" +
                "                    \"spotify\": \"http://open.spotify.com/user/spotify/playlist/6ftJBzU2LLQcaKefMi7ee7\"\n" +
                "                },\n" +
                "                \"href\": \"https://api.spotify.com/v1/users/spotify/playlists/6ftJBzU2LLQcaKefMi7ee7\",\n" +
                "                \"id\": \"6ftJBzU2LLQcaKefMi7ee7\",\n" +
                "                \"images\": [\n" +
                "                    {\n" +
                "                        \"height\": 300,\n" +
                "                        \"url\": \"https://i.scdn.co/image/7bd33c65ebd1e45975bbcbbf513bafe272f033c7\",\n" +
                "                        \"width\": 300\n" +
                "                    }\n" +
                "                ],\n" +
                "                \"name\": \"Monday Morning Mood\",\n" +
                "                \"owner\": {\n" +
                "                    \"external_urls\": {\n" +
                "                        \"spotify\": \"http://open.spotify.com/user/spotify\"\n" +
                "                    },\n" +
                "                    \"href\": \"https://api.spotify.com/v1/users/spotify\",\n" +
                "                    \"id\": \"spotify\",\n" +
                "                    \"type\": \"user\",\n" +
                "                    \"uri\": \"spotify:user:spotify\"\n" +
                "                },\n" +
                "                \"public\": null,\n" +
                "                \"snapshot_id\": \"WwGvSIVUkUvGvqjgj/bQHlRycYmJ2TkoIxYfoalWlmIZT6TvsgvGMgtQ2dGbkrAW\",\n" +
                "                \"tracks\": {\n" +
                "                    \"href\": \"https://api.spotify.com/v1/users/spotify/playlists/6ftJBzU2LLQcaKefMi7ee7/tracks\",\n" +
                "                    \"total\": 245\n" +
                "                },\n" +
                "                \"type\": \"playlist\",\n" +
                "                \"uri\": \"spotify:user:spotify:playlist:6ftJBzU2LLQcaKefMi7ee7\"\n" +
                "            },\n" +
                "            {\n" +
                "                \"collaborative\": false,\n" +
                "                \"external_urls\": {\n" +
                "                    \"spotify\": \"http://open.spotify.com/user/spotify__sverige/playlist/4uOEx4OUrkoGNZoIlWMUbO\"\n" +
                "                },\n" +
                "                \"href\": \"https://api.spotify.com/v1/users/spotify__sverige/playlists/4uOEx4OUrkoGNZoIlWMUbO\",\n" +
                "                \"id\": \"4uOEx4OUrkoGNZoIlWMUbO\",\n" +
                "                \"images\": [\n" +
                "                    {\n" +
                "                        \"height\": 300,\n" +
                "                        \"url\": \"https://i.scdn.co/image/24aa1d1b491dd529b9c03392f350740ed73438d8\",\n" +
                "                        \"width\": 300\n" +
                "                    }\n" +
                "                ],\n" +
                "                \"name\": \"Upp och hoppa!\",\n" +
                "                \"owner\": {\n" +
                "                    \"external_urls\": {\n" +
                "                        \"spotify\": \"http://open.spotify.com/user/spotify__sverige\"\n" +
                "                    },\n" +
                "                    \"href\": \"https://api.spotify.com/v1/users/spotify__sverige\",\n" +
                "                    \"id\": \"spotify__sverige\",\n" +
                "                    \"type\": \"user\",\n" +
                "                    \"uri\": \"spotify:user:spotify__sverige\"\n" +
                "                },\n" +
                "                \"public\": null,\n" +
                "                \"snapshot_id\": \"0j9Rcbt2KtCXEXKtKy/tnSL5r4byjDBOIVY1dn4S6GV73EEUgNuK2hU+QyDuNnXz\",\n" +
                "                \"tracks\": {\n" +
                "                    \"href\": \"https://api.spotify.com/v1/users/spotify__sverige/playlists/4uOEx4OUrkoGNZoIlWMUbO/tracks\",\n" +
                "                    \"total\": 38\n" +
                "                },\n" +
                "                \"type\": \"playlist\",\n" +
                "                \"uri\": \"spotify:user:spotify__sverige:playlist:4uOEx4OUrkoGNZoIlWMUbO\"\n" +
                "            }\n" +
                "        ],\n" +
                "        \"limit\": 20,\n" +
                "        \"next\": null,\n" +
                "        \"offset\": 0,\n" +
                "        \"previous\": null,\n" +
                "        \"total\": 2\n" +
                "    }\n" +
                "}".replaceAll(spotifyServerUrl, resourceServerUrl);


        private static final WebServerMock resourceServerMock = new WebServerMock(resourceServerPort)
                .setPage("/v1/browse/categories", apiCategoriesResponse)
                .setPage("/v1/browse/categories/party/playlists", apiPlaylistsPartyResponse)
                // unpredictable error on toplists request!!!
                .setPage("/v1/browse/categories/toplists/playlists", apiTestErrorResponse)
                .setPage("/v1/browse/new-releases", apiNewReleasesResponse)
                .setPage("/v1/browse/featured-playlists", apiFeaturedPlaylistsResponse);

        private static final MockTokenServer tokenServer = new MockTokenServer(accessServer);
        private static final MockTokenServer resourceServer = new MockTokenServer(resourceServerMock);

        public static void auth(TestedProgram userProgram) {

            Server server = new Server(userProgram, fictiveAuthCode);
            server.start();

            synchronized (accessServer) {
                if (!accessServer.isStarted())
                    tokenServer.start();
            }

            synchronized (resourceServerMock) {
                if (!resourceServerMock.isStarted())
                    resourceServer.start();
            }

            userProgram.goBackground();
            userProgram.execute("auth");

            try {
                server.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            if (Server.checkResult != null) {
                throw new WrongAnswer(Server.checkResult.getFeedback());
            }

            userProgram.stopBackground();
        }

        private CheckResult checkAlbum1(String reply) {
            String album1 =
                    "Runnin'\n" +
                            "[Pharrell Williams]\n" +
                            "https://open.spotify.com/album/5ZX4m5aVSmWQ5iHAPQpT71"
                                    .replaceAll(spotifyServerUrl, resourceServerUrl);
            String album2 =
                    "Sneakin'\n" +
                            "[Drake2]\n" +
                            "https://open.spotify.com/album/0geTzdk2InlqIoB16fW9Nd"
                                    .replaceAll(spotifyServerUrl, resourceServerUrl);

            if (!reply.contains(album1)) {
                throw new WrongAnswer("Album from page 1 not appeared on \"new\" action");
            }
            if (reply.contains(album2)) {
                throw new WrongAnswer("Album from page 2 appeared on page 1 on \"new\" action");
            }
            if (!reply.contains("---PAGE 1 OF 2---")) {
                throw new WrongAnswer("Something wrong with pagination format. Not found ---PAGE 1 OF 2---");
            }
            return CheckResult.correct();
        }

        private CheckResult checkAlbum2(String reply) {
            String album1 =
                    "Runnin'\n" +
                            "[Pharrell Williams]\n" +
                            "https://open.spotify.com/album/5ZX4m5aVSmWQ5iHAPQpT71"
                                    .replaceAll(spotifyServerUrl, resourceServerUrl);
            String album2 =
                    "Sneakin'\n" +
                            "[Drake2]\n" +
                            "https://open.spotify.com/album/0geTzdk2InlqIoB16fW9Nd"
                                    .replaceAll(spotifyServerUrl, resourceServerUrl);

            if (!reply.contains(album2)) {
                throw new WrongAnswer("Album from page 2 not appeared on \"new\" action");
            }
            if (reply.contains(album1)) {
                throw new WrongAnswer("Album from page 1 appeared on page 2 on \"new\" action");
            }

            if (!reply.contains("---PAGE 2 OF 2---")) {
                throw new WrongAnswer("Something wrong with pagination format. Not found ---PAGE 2 OF 2---");
            }

            return CheckResult.correct();
        }

        private int countAppearances(String str, String findStr) {
            int lastIndex = 0;
            int count = 0;

            while (lastIndex != -1) {
                lastIndex = str.indexOf(findStr, lastIndex);
                if (lastIndex != -1) {
                    count++;
                    lastIndex += findStr.length();
                }
            }
            return count;
        }

        @DynamicTestingMethod
        CheckResult testAuth() {

            TestedProgram userProgram = new TestedProgram();
            userProgram.start(arguments);
            userProgram.setReturnOutputAfterExecution(false);

            auth(userProgram);

            userProgram.execute("exit");
            userProgram.stop();

            return CheckResult.correct();

        }

        @DynamicTestingMethod
        CheckResult testNew() {

            TestedProgram userProgram = new TestedProgram();
            userProgram.start(arguments);
            userProgram.setReturnOutputAfterExecution(false);
            auth(userProgram);

            userProgram.execute("new");
            String output = userProgram.getOutput();
            checkAlbum1(output);

            userProgram.execute("prev");
            output = userProgram.getOutput();
            if (!output.contains("No more pages")) {
                return CheckResult.wrong("Your output should be `No more pages` on -1 page.");
            }

            userProgram.execute("next");
            output = userProgram.getOutput();
            checkAlbum2(output);

            userProgram.execute("next");
            output = userProgram.getOutput();
            if (!output.contains("No more pages")) {
                return CheckResult.wrong("Your output should be `No more pages` after the last page.");
            }

            userProgram.execute("prev");
            output = userProgram.getOutput();
            checkAlbum1(output);

            userProgram.execute("exit");
            userProgram.stop();

            return CheckResult.correct();
        }

        @DynamicTestingMethod
        CheckResult testCategoriesNextPrev() {

            TestedProgram userProgram = new TestedProgram();
            userProgram.start(arguments);
            userProgram.setReturnOutputAfterExecution(false);
            auth(userProgram);

            String category1 = "Top Lists";
            String category2 = "Super Mood";
            String category3 = "Party Time";

            userProgram.execute("categories");
            String output = userProgram.getOutput();
            if (countAppearances(output, category1) != 1
                    || countAppearances(output, category2) != 0
                    || countAppearances(output, category3) != 0) {
                return CheckResult.wrong("Something wrong with showing categories and pages");
            }

            userProgram.execute("next");
            output = userProgram.getOutput();
            if (countAppearances(output, category1) != 0
                    || countAppearances(output, category2) != 1
                    || countAppearances(output, category3) != 0) {
                return CheckResult.wrong("Something wrong with showing categories and pages");
            }

            userProgram.execute("next");
            output = userProgram.getOutput();
            if (countAppearances(output, category1) != 0
                    || countAppearances(output, category2) != 0
                    || countAppearances(output, category3) != 1) {
                return CheckResult.wrong("Something wrong with showing categories and pages");
            }

            userProgram.execute("prev");
            output = userProgram.getOutput();
            if (countAppearances(output, category1) != 0
                    || countAppearances(output, category2) != 1
                    || countAppearances(output, category3) != 0) {
                return CheckResult.wrong("Something wrong with showing categories and pages");
            }

            userProgram.execute("prev");
            output = userProgram.getOutput();
            if (countAppearances(output, category1) != 1
                    || countAppearances(output, category2) != 0
                    || countAppearances(output, category3) != 0) {
                return CheckResult.wrong("Something wrong with showing categories and pages");
            }

            userProgram.stop();
            return CheckResult.correct();
        }

        @DynamicTestingMethod
        CheckResult testFeatured() {

            TestedProgram userProgram = new TestedProgram();
            userProgram.start(arguments);
            userProgram.setReturnOutputAfterExecution(false);
            auth(userProgram);

            String featured1 =
                    "Monday Morning Mood\n" +
                            "http://open.spotify.com/user/spotify/playlist/6ftJBzU2LLQcaKefMi7ee7"
                                    .replaceAll(spotifyServerUrl, resourceServerUrl);

            String featured2 =
                    "Upp och hoppa!\n" +
                            "http://open.spotify.com/user/spotify__sverige/playlist/4uOEx4OUrkoGNZoIlWMUbO"
                                    .replaceAll(spotifyServerUrl, resourceServerUrl);

            userProgram.execute("featured");
            String output = userProgram.getOutput();
            if (countAppearances(output, featured1) != 1
                    || countAppearances(output, featured2) != 0) {
                return CheckResult.wrong("Something wrong with showing featured playlists and pages");
            }

            userProgram.execute("next");
            output = userProgram.getOutput();
            if (countAppearances(output, featured1) != 0
                    || countAppearances(output, featured2) != 1) {
                return CheckResult.wrong("Something wrong with showing featured playlists and pages");
            }

            userProgram.execute("prev");
            output = userProgram.getOutput();
            if (countAppearances(output, featured1) != 1
                    || countAppearances(output, featured2) != 0) {
                return CheckResult.wrong("Something wrong with showing featured playlists and pages");
            }

            userProgram.execute("exit");
            userProgram.stop();

            return CheckResult.correct();
        }

        @DynamicTestingMethod
        CheckResult testPlayList() {

            TestedProgram userProgram = new TestedProgram();
            userProgram.start(arguments);
            userProgram.setReturnOutputAfterExecution(false);
            auth(userProgram);

            String playlist1 =
                    "Noite Eletronica\n" +
                            "http://open.spotify.com/user/spotifybrazilian/playlist/4k7EZPI3uKMz4aRRrLVfen"
                                    .replaceAll(spotifyServerUrl, resourceServerUrl);

            String playlist2 =
                    "Festa Indie\n" +
                            "http://open.spotify.com/user/spotifybrazilian/playlist/4HZh0C9y80GzHDbHZyX770"
                                    .replaceAll(spotifyServerUrl, resourceServerUrl);

            userProgram.execute("playlists Party Time");
            String output = userProgram.getOutput();
            if (countAppearances(output, playlist1) != 1
                    || countAppearances(output, playlist2) != 0) {
                return CheckResult.wrong("Something wrong with showing playlists and pages");
            }

            userProgram.execute("next");
            output = userProgram.getOutput();
            if (countAppearances(output, playlist1) != 0
                    || countAppearances(output, playlist2) != 1) {
                return CheckResult.wrong("Something wrong with showing playlists and pages");
            }

            userProgram.execute("prev");
            output = userProgram.getOutput();
            if (countAppearances(output, playlist1) != 1
                    || countAppearances(output, playlist2) != 0) {
                return CheckResult.wrong("Something wrong with showing playlists and pages");
            }

            userProgram.execute("exit");
            userProgram.stop();

            return CheckResult.correct();
        }


        @AfterClass
        public static void afterTest() {
            tokenServer.stopMock();
            resourceServer.stopMock();
        }

    }
  learner_created: false
- name: test/Server.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.output.OutputHandler;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.net.URI;
    import java.net.http.HttpClient;
    import java.net.http.HttpRequest;
    import java.net.http.HttpResponse;
    import java.net.http.HttpTimeoutException;
    import java.time.Duration;

    public class Server extends Thread {

        TestedProgram userProgram;
        private final String fictiveAuthCode;
        public static CheckResult checkResult = null;
        String redirectUri = "";


        public Server(TestedProgram userProgram, String fictiveAuthCode) {
            this.userProgram = userProgram;
            this.fictiveAuthCode = fictiveAuthCode;
        }

        @Override
        public void run() {
            long searchTime = System.currentTimeMillis();

            while (!Thread.interrupted()) {

                if (System.currentTimeMillis() - searchTime > 1000 * 9) {
                    checkResult = CheckResult.wrong("Not found a link with redirect_uri after 9 seconds.");
                    return;
                }

                String out = OutputHandler.getDynamicOutput();
                if (out.contains("redirect_uri=")) {
                    redirectUri = out.split("redirect_uri=")[1];
                    if (redirectUri.contains("&")) {
                        redirectUri = redirectUri.split("&")[0];
                    }
                    if (redirectUri.contains("\n")) {
                        redirectUri = redirectUri.split("\\R")[0];
                    }
                    break;
                }

                try {
                    sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }

            try {
                HttpClient client = HttpClient.newBuilder().build();
                HttpRequest emptyRequest = HttpRequest.newBuilder()
                    .uri(URI.create(redirectUri))
                    .timeout(Duration.ofMillis(500))
                    .GET()
                    .build();
                HttpRequest errorRequest = HttpRequest.newBuilder()
                    .uri(URI.create(redirectUri + "?error=access_denied"))
                    .timeout(Duration.ofMillis(500))
                    .GET()
                    .build();
                HttpRequest codeRequest = HttpRequest.newBuilder()
                    .uri(URI.create(redirectUri + "?code=" + fictiveAuthCode))
                    .timeout(Duration.ofMillis(500))
                    .GET()
                    .build();

                System.out.println("Tester: making requests to redirect uri: " + redirectUri);
                HttpResponse<String> badResponse = client.send(emptyRequest, HttpResponse.BodyHandlers.ofString());
                System.out.println("Tester: done request 1: " + badResponse.body());
                HttpResponse<String> badResponse2 = client.send(errorRequest, HttpResponse.BodyHandlers.ofString());
                System.out.println("Tester: done request 2: " + badResponse2.body());
                HttpResponse<String> goodResponse = client.send(codeRequest, HttpResponse.BodyHandlers.ofString());
                System.out.println("Tester: done request 3: " + goodResponse.body());

                if (!badResponse.body().contains("Authorization code not found. Try again.")
                    || !badResponse2.body().contains("Authorization code not found. Try again.")) {
                    checkResult = CheckResult.wrong("You should send to the browser: `Authorization code not found. Try again.` if there is no code.");
                    return;
                }

                if (!goodResponse.body().contains("Got the code. Return back to your program.")) {
                    checkResult = CheckResult.wrong("\"You should send `Got the code. Return back to your program.` \" +\n" +
                        "                        \"if the query contains the code.");
                }
            } catch (HttpTimeoutException e) {
                checkResult = CheckResult.wrong("Not received any response from the server, found in redirect_uri: "
                    + redirectUri);
            } catch (InterruptedException e) {
                checkResult = CheckResult.wrong("Request to " + redirectUri + " was interrupted. " +
                    "Make sure, that you give the right feedback in your browser.");
            } catch (Exception e) {
                System.out.println("Tester: Error: " + e.getMessage());
                checkResult = CheckResult.wrong("Something wrong with the server response.\n" +
                    "Make sure, that you get the right feedback in your browser.");
            }
        }
    }
  learner_created: false
- name: src/advisor/ui/Menu.java
  visible: true
  text: |
    package advisor.ui;

    import advisor.api.Spotify;
    import advisor.exceptions.UnauthorizedException;
    import advisor.exceptions.UnknownCommandException;
    import advisor.utils.Console;
    import com.google.gson.*;

    import java.util.Map;
    import java.util.HashMap;

    public class Menu {
        private static boolean running = true;
        private static Gson gson = new Gson();
        private static Spotify spotifyApi;

        private static final ICommand newCommand = (args) -> {
            JsonObject response = spotifyApi.GET("new-releases");
            if (response.has("error")) {
                Console.println(response.get("error").getAsJsonObject().get("message").getAsString());
                return;
            }
            JsonArray items = response.get("albums").getAsJsonObject().get("items").getAsJsonArray();
            for (JsonElement n: items) {
                JsonObject newObject = n.getAsJsonObject();
                Console.println(newObject.get("name").getAsString());
                StringBuilder artistsString = new StringBuilder();
                artistsString.append("[");
                for (JsonElement artist: newObject.get("artists").getAsJsonArray()) {
                    artistsString.append(artist.getAsJsonObject().get("name").getAsString());
                    artistsString.append(", ");
                }
                artistsString.deleteCharAt(artistsString.length() - 1);
                artistsString.deleteCharAt(artistsString.length() - 1);
                artistsString.append("]");
                Console.println(artistsString.toString());
                Console.println(newObject.get("external_urls").getAsJsonObject().get("spotify").getAsString());
                Console.println();
            }
        };

        private static final ICommand featuredCommand = (args) -> {
            JsonObject response = spotifyApi.GET("featured-playlists");
            if (response.has("error")) {
                Console.println(response.get("error").getAsJsonObject().get("message").getAsString());
                return;
            }
            JsonArray items = response.get("playlists").getAsJsonObject().get("items").getAsJsonArray();
            for (JsonElement i: items) {
                JsonObject playlist = i.getAsJsonObject();
                Console.println(playlist.get("name").getAsString());
                Console.println(playlist.get("external_urls").getAsJsonObject().get("spotify").getAsString());
                Console.println();
            }
        };

        private static final ICommand categoriesCommand = (args) -> {
            JsonObject response = spotifyApi.GET("categories");
            if (response.has("error")) {
                Console.println(response.get("error").getAsJsonObject().get("message").getAsString());
                return;
            }
            JsonArray items = response.get("categories").getAsJsonObject().get("items").getAsJsonArray();
            for (JsonElement i: items) {
                JsonObject obj = i.getAsJsonObject();
                Console.println(obj.get("name").getAsString());
            }
        };

        private static final ICommand playlistsCommand = (args) -> {
            StringBuilder stringBuilder = new StringBuilder();
            for (int i = 1; i < args.length; i++) {
                stringBuilder.append((String) args[i]);
                stringBuilder.append(" ");
            }
            String categoryName = stringBuilder.toString().trim();
            JsonObject response = spotifyApi.GET("categories");
            if (response.has("error")) {
                Console.println(response.get("error").getAsJsonObject().get("message").getAsString());
                return;
            }
            JsonArray categories = response.get("categories").getAsJsonObject().get("items").getAsJsonArray();
            String categoryID = "null";
            for (JsonElement i: categories) {
                JsonObject category = i.getAsJsonObject();
                if (categoryName.equals(category.get("name").getAsString())) {
                    categoryID = category.get("id").getAsString();
                }
            }

            response = spotifyApi.GET(String.format("categories/%s/playlists", categoryID));
            if (response.has("error")) {
                Console.println(response.get("error").getAsJsonObject().get("message").getAsString());
                return;
            }
            JsonArray playlists = response.get("playlists").getAsJsonObject().get("items").getAsJsonArray();
            for (JsonElement pl: playlists) {
                JsonObject playlist = pl.getAsJsonObject();
                Console.println(playlist.get("name").getAsString());
                Console.println(playlist.get("external_urls").getAsJsonObject().get("spotify").getAsString());
            }
        };

        private static final ICommand authCommand = (args) -> {
            spotifyApi.auth();
            if (spotifyApi.isAuthenticated()) Console.println("Success!");
        };

        private static final ICommand exitCommand = (args) -> {
            Console.println("---GOODBYE!---");
            running = false;
        };

        private static final Map<String, ICommand> commandMap = new HashMap<>();


        public static void initialize(Spotify api) {
            spotifyApi = api;
            commandMap.put("new", newCommand);
            commandMap.put("featured", featuredCommand);
            commandMap.put("categories", categoriesCommand);
            commandMap.put("playlists", playlistsCommand);
            commandMap.put("auth", authCommand);
            commandMap.put("exit", exitCommand);
        }

        public static void invoke() {
            String input = Console.getLine();
            ICommand command;
            String[] tokens = input.split(" ");
            command = getCommandFromName(tokens[0]);
            Object[] args = (tokens.length != 1) ? tokens : new Object[0];
            try {
                command.execute(args);
            } catch (UnauthorizedException e) {
                Console.println(e.getMessage());
            }
        }

        public static ICommand getCommandFromName(String name) throws UnknownCommandException {
            if (commandMap.containsKey(name)) {
                return commandMap.get(name);
            }
            throw new UnknownCommandException();
        }

        public static boolean isRunning() {
            return running;
        }
    }
  learner_created: true
- name: src/advisor/exceptions/UnknownCommandException.java
  visible: true
  text: |
    package advisor.exceptions;

    public class UnknownCommandException extends RuntimeException {
        public UnknownCommandException() {
            super("Unknown command.", null);
        }
    }
  learner_created: true
- name: src/advisor/api/Spotify.java
  visible: true
  text: |
    package advisor.api;

    import advisor.exceptions.UnauthorizedException;
    import advisor.utils.Console;
    import com.google.gson.*;
    import com.sun.net.httpserver.*;
    import java.io.IOException;
    import java.net.*;
    import java.net.http.*;
    import java.util.*;
    import java.util.concurrent.TimeUnit;

    public class Spotify {
        private static final Gson gson = new Gson();
        private static final String clientID = "0d7cdbd67fde4af792a1745e5c10605f";
        private static final String clientSecret = System.getenv("CLIENT_SECRET");
        private static final int port = new Random().nextInt(20000) + 9000;
        private static final String redirectURI = String.format("http://localhost:%s", port);

        private final HttpServer server;
        private final HttpClient client;

        private final String accessUrl;
        private final String apiUrl;
        private volatile String code = null;
        private volatile boolean serverIsClosed = true;
        private boolean authenticated = false;

        private Map<String, String> tokenUtils = new HashMap<>();
        private final Timer TOKEN_TIMER = new Timer();

        public Spotify(String url, String api) throws IOException {
            this.accessUrl = url;
            this.apiUrl = api;
            this.server = HttpServer.create(new InetSocketAddress(port), 10);
            this.client = HttpClient.newBuilder().build();
        }

        public void auth() {
            if (authenticated) return;
            initializeSever();
            String authUrl = getOAuthUrl();
            Console.print("use this link to request the access code:\n%s\nwaiting for code...", authUrl);
            while (!serverIsClosed) {
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
            if (code != null) {
                getToken();
            }
        }

        public void getToken() {
            Console.print("code received\nmaking http request for access_token...");

            String body = String.format("grant_type=authorization_code&code=%s&redirect_uri=%s&client_id=%s&client_secret=%s", code, redirectURI, clientID, clientSecret);
            HttpRequest request = HttpRequest.newBuilder()
                    .header("Content-Type", "application/x-www-form-urlencoded")
                    .uri(URI.create(String.format("%s/api/token", accessUrl)))
                    .POST(HttpRequest.BodyPublishers.ofString(body))
                    .build();
            try {
                HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());
                JsonObject jsonObject = JsonParser.parseString(response.body()).getAsJsonObject();
                if (jsonObject.has("error")) {
                    Console.println(jsonObject.get("error").getAsJsonObject().get("message").getAsString());
                    return;
                }
                setToken(jsonObject);
                tokenUtils.put("refresh_token", jsonObject.get("refresh_token").getAsString());
                authenticated = true;
            } catch (IOException | InterruptedException e) {
                e.printStackTrace();
            }
        }

        public void setToken(JsonObject jsonObject) {
            tokenUtils.put("access_token", jsonObject.get("access_token").getAsString());
            tokenUtils.put("token_type", jsonObject.get("token_type").getAsString());
            tokenUtils.put("expires_in", jsonObject.get("expires_in").getAsString());
            TimerTask tokenExpirationTimer = new TimerTask() {
                @Override
                public void run() {
                    refreshToken();
                }
            };
            TOKEN_TIMER.schedule(tokenExpirationTimer, TimeUnit.SECONDS.toMillis(Long.parseLong(tokenUtils.get("expires_in"))));
        }

        public void refreshToken() {
            String body = String.format("grant_type=refresh_token&refresh_token=%s", tokenUtils.get("refresh_token"));
            HttpRequest request = HttpRequest.newBuilder()
                    .header("Content-Type", "application/x-www-form-urlencoded")
                    .header("Authorization: Basic", String.format("%s:%s", clientID, clientSecret))
                    .uri(URI.create(String.format("%s/api/token", accessUrl)))
                    .POST(HttpRequest.BodyPublishers.ofString(body))
                    .build();

            try {
                HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());
                JsonObject jsonObject = JsonParser.parseString(response.body()).getAsJsonObject();
                if (jsonObject.has("error")) {
                    Console.println(jsonObject.get("error").getAsJsonObject().get("message").getAsString());
                    return;
                }
                setToken(jsonObject);
            } catch (IOException | InterruptedException e) {
                e.printStackTrace();
            }

        }

        public void initializeSever() {
            server.createContext("/", httpExchange -> {
                // http:localhost:8080?code=123
                String query = httpExchange.getRequestURI().getQuery();
                if (query == null) query ="void";
                if (query.contains("code=")) {
                    String[] tokens = query.split("=");
                    if (tokens.length == 2) {
                        code = tokens[1];
                    }
                }

                String response = (code != null) ? "Got the code. Return back to your program." :
                        "Authorization code not found. Try again.";
                httpExchange.sendResponseHeaders(200, response.length());
                httpExchange.getResponseBody().write(response.getBytes());
                httpExchange.getResponseBody().close();
                if (code != null) {
                    Console.println("Closing the server.");
                    serverIsClosed = true;
                    server.stop(10);
                }
            });
            serverIsClosed = false;
            server.start();
            try {
                Thread.sleep(2);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }

        public String getOAuthUrl() {
            return String.format("%s/authorize?client_id=%s&response_type=code&redirect_uri=%s", accessUrl, clientID, redirectURI);
        }

        public JsonObject GET(String req) throws UnauthorizedException {
            if (!isAuthenticated()) throw new UnauthorizedException();
            HttpRequest httpRequest = HttpRequest.newBuilder()
                    .header("Content-Type", "application/x-www-form-urlencoded")
                    .header("Authorization", String.format("%s %s", tokenUtils.get("token_type"), tokenUtils.get("access_token")))
                    .uri(URI.create(String.format("%s/v1/browse/%s", apiUrl, req)))
                    .build();
            try {
                HttpResponse<String> response = client.send(httpRequest, HttpResponse.BodyHandlers.ofString());
                return JsonParser.parseString(response.body()).getAsJsonObject();
            } catch (IOException | InterruptedException e) {
                e.printStackTrace();
            }
            return null;
        }

        public void POST() throws UnauthorizedException {
            if (!isAuthenticated()) throw new UnauthorizedException();
        }

        public boolean isAuthenticated() {
            return authenticated;
        }
    }
  learner_created: true
- name: src/advisor/utils/Console.java
  visible: true
  text: |
    package advisor.utils;

    import java.util.Scanner;

    public class Console {
        public static final Scanner scanner = new Scanner(System.in);

        public static String getLine() {
            return scanner.nextLine();
        }

        public static void print(String str, Object ... args) {
            printf(str, args);
            println();
        }

        public static void printf(String str, Object ... args) {
            System.out.printf(str, args);
        }

        public static void println() {
            System.out.println();
        }

        public static void println(String str) {
            System.out.println(str);
        }
    }
  learner_created: true
- name: src/advisor/ui/ICommand.java
  visible: true
  text: |
    package advisor.ui;

    public interface ICommand {
        void execute(Object ... args);
    }
  learner_created: true
- name: src/advisor/exceptions/UnauthorizedException.java
  visible: true
  text: |
    package advisor.exceptions;

    public class UnauthorizedException extends RuntimeException {
        public UnauthorizedException(String ... args) {
            super(args.length == 0 ? "Please, provide access for application." : args[0], null);
        }
    }
  learner_created: true
- name: src/advisor/ui/SubMenu.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/62/stages/339/implement#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Thu, 29 Jul 2021 21:01:17 UTC
record: -1
