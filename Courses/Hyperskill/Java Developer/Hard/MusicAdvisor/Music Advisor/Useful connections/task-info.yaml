type: edu
custom_name: stage3
files:
- name: src/advisor/Main.java
  visible: true
  text: |
    package advisor;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    apply plugin: 'java'
    apply plugin: 'application'

    group 'advisor'
    version '1.0-SNAPSHOT'

    sourceCompatibility = 11
    mainClassName = 'advisor.Main'

    repositories {
        mavenCentral()
    }

    dependencies {
        implementation 'com.google.code.gson:gson:+'
    }

    jar {
        manifest {
            attributes 'Main-Class' : 'advisor.Main'
        }
        from {
            configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
        }
    }
  learner_created: false
- name: test/MockTokenServer.java
  visible: false
  text: |
    import org.hyperskill.hstest.mocks.web.WebServerMock;

    public class MockTokenServer extends Thread {

        WebServerMock accessServer;

        public MockTokenServer (WebServerMock accessServer) {
            this.accessServer = accessServer;
        }

        @Override
        public void run() {
            accessServer.start();
            accessServer.run();
        }

        public void stopMock() {
            interrupt();
        }
    }
  learner_created: false
- name: test/MusicAdvisorTest.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.mocks.web.WebServerMock;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.junit.AfterClass;

    public class MusicAdvisorTest extends StageTest<String> {

        private static final String fictiveAuthCode = "123123";
        private static final String fictiveAccessToken = "456456";
        private static final String fictiveRefreshToken = "567567";

        private static final int accessServerPort = 45678;
        private static final String accessServerUrl = "http://127.0.0.1:" + accessServerPort;

        private static final String[] arguments = new String[]{
                "-access",
                accessServerUrl
        };

        private static final String tokenResponse = "{" +
                "\"access_token\":\"" + fictiveAccessToken + "\"," +
                "\"token_type\":\"Bearer\"," +
                "\"expires_in\":3600," +
                "\"refresh_token\":" + "\"" + fictiveRefreshToken + "\"," +
                "\"scope\":\"\"" +
                "}";

        private static final WebServerMock accessServer = new WebServerMock(accessServerPort)
                .setPage("/api/token", tokenResponse);

        private static final MockTokenServer tokenServer = new MockTokenServer(accessServer);

        @DynamicTestingMethod
        CheckResult testAuth() {

            TestedProgram userProgram = new TestedProgram();
            userProgram.start(arguments);
            userProgram.setReturnOutputAfterExecution(false);

            Server server = new Server(userProgram, fictiveAuthCode);
            server.start();
            tokenServer.start();

            userProgram.goBackground();
            userProgram.execute("auth");

            try {
                server.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            if (Server.checkResult != null) {
                return Server.checkResult;
            }

            userProgram.stopBackground();

            String outputAfterAuth = userProgram.getOutput();
            if (!outputAfterAuth.contains(fictiveAccessToken)) {
                return CheckResult.wrong("Not found correct access token in the result. " +
                        "Make sure, that you use the server from the command line arguments to access the token.");
            }

            userProgram.execute("featured");

            String outputAfterFeatured = userProgram.getOutput();
            if (!outputAfterFeatured.contains("---FEATURED---")) {
                return CheckResult.wrong("When \"featured\" was inputted there should be \"---FEATURED---\" line");
            }

            userProgram.execute("exit");
            userProgram.stop();

            return CheckResult.correct();
        }

        @DynamicTestingMethod
        CheckResult testNewWithoutAuth() {

            TestedProgram userProgram = new TestedProgram();
            userProgram.start(arguments);
            userProgram.setReturnOutputAfterExecution(false);

            userProgram.execute("new");
            String outputAfterNew = userProgram.getOutput();

            if (!outputAfterNew.strip().startsWith("Please, provide access for application.")) {
                return CheckResult.wrong("When no access provided you should output " +
                        "\"Please, provide access for application.\"");
            }

            userProgram.execute("exit");
            userProgram.stop();

            return CheckResult.correct();
        }

        @DynamicTestingMethod
        CheckResult testFeaturedWithoutAuth() {

            TestedProgram userProgram = new TestedProgram();
            userProgram.start(arguments);
            userProgram.setReturnOutputAfterExecution(false);

            userProgram.execute("featured");
            String outputAfterNew = userProgram.getOutput();

            if (!outputAfterNew.strip().startsWith("Please, provide access for application.")) {
                return CheckResult.wrong("When no access provided you should output " +
                        "\"Please, provide access for application.\"");
            }

            userProgram.execute("exit");
            userProgram.stop();

            return CheckResult.correct();
        }

        @AfterClass
        public static void afterTest() {
            tokenServer.stopMock();
        }

    }
  learner_created: false
- name: test/Server.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.output.OutputHandler;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.net.URI;
    import java.net.http.HttpClient;
    import java.net.http.HttpRequest;
    import java.net.http.HttpResponse;
    import java.net.http.HttpTimeoutException;
    import java.time.Duration;

    public class Server extends Thread {

        TestedProgram userProgram;
        private final String fictiveAuthCode;
        public static CheckResult checkResult = null;
        String redirectUri = "";


        public Server(TestedProgram userProgram, String fictiveAuthCode) {
            this.userProgram = userProgram;
            this.fictiveAuthCode = fictiveAuthCode;
        }

        @Override
        public void run() {
            long searchTime = System.currentTimeMillis();

            while (!Thread.interrupted()) {

                if (System.currentTimeMillis() - searchTime > 1000 * 9) {
                    checkResult = CheckResult.wrong("Not found a link with redirect_uri after 9 seconds.");
                    return;
                }

                String out = OutputHandler.getDynamicOutput();
                if (out.contains("redirect_uri=")) {
                    redirectUri = out.split("redirect_uri=")[1];
                    if (redirectUri.contains("&")) {
                        redirectUri = redirectUri.split("&")[0];
                    }
                    if (redirectUri.contains("\n")) {
                        redirectUri = redirectUri.split("\\R")[0];
                    }
                    break;
                }

                try {
                    sleep(300);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }

            try {
                HttpClient client = HttpClient.newBuilder().build();
                HttpRequest emptyRequest = HttpRequest.newBuilder()
                        .uri(URI.create(redirectUri))
                        .timeout(Duration.ofMillis(500))
                        .GET()
                        .build();
                HttpRequest errorRequest = HttpRequest.newBuilder()
                        .uri(URI.create(redirectUri + "?error=access_denied"))
                        .timeout(Duration.ofMillis(500))
                        .GET()
                        .build();
                HttpRequest codeRequest = HttpRequest.newBuilder()
                        .uri(URI.create(redirectUri + "?code=" + fictiveAuthCode))
                        .timeout(Duration.ofMillis(500))
                        .GET()
                        .build();

                System.out.println("Tester: making requests to redirect uri: " + redirectUri);
                HttpResponse<String> badResponse = client.send(emptyRequest, HttpResponse.BodyHandlers.ofString());
                System.out.println("Tester: done request 1: " + badResponse.body());
                HttpResponse<String> badResponse2 = client.send(errorRequest, HttpResponse.BodyHandlers.ofString());
                System.out.println("Tester: done request 2: " + badResponse2.body());
                HttpResponse<String> goodResponse = client.send(codeRequest, HttpResponse.BodyHandlers.ofString());
                System.out.println("Tester: done request 3: " + goodResponse.body());

                if (!badResponse.body().contains("Authorization code not found. Try again.")
                        || !badResponse2.body().contains("Authorization code not found. Try again.")) {
                    checkResult = CheckResult.wrong("You should send to the browser: `Authorization code not found. Try again.` if there is no code.");
                    return;
                }

                if (!goodResponse.body().contains("Got the code. Return back to your program.")) {
                    checkResult = CheckResult.wrong("\"You should send `Got the code. Return back to your program.` \" +\n" +
                            "                        \"if the query contains the code.");
                }
            } catch (HttpTimeoutException e) {
                checkResult = CheckResult.wrong("Not received any response from the server, found in redirect_uri: "
                        + redirectUri);
            } catch (InterruptedException e) {
                checkResult = CheckResult.wrong("Request to " + redirectUri + " was interrupted. " +
                        "Make sure, that you give the right feedback in your browser.");
            } catch (Exception e) {
                System.out.println("Tester: Error: " + e.getMessage());
                e.printStackTrace();
            }

        }
    }
  learner_created: false
- name: src/advisor/ui/Menu.java
  visible: true
  text: |
    package advisor.ui;

    import advisor.api.Spotify;
    import advisor.exceptions.UnauthorizedException;
    import advisor.exceptions.UnknownCommandException;
    import advisor.utils.Console;

    import java.util.Map;
    import java.util.HashMap;

    public class Menu {
        private static boolean running = true;

        private static final ICommand newCommand = (args) -> {
            Spotify.GET();
            Console.println("---NEW RELEASES---");
            Console.println("Mountains [Sia, Diplo, Labrinth]\n" +
                    "Runaway [Lil Peep]\n" +
                    "The Greatest Show [Panic! At The Disco]\n" +
                    "All Out Life [Slipknot]");
        };

        private static final ICommand featuredCommand = (args) -> {
            Spotify.GET();
            Console.println("---FEATURED---");
            Console.println("Mellow Morning\n" +
                    "Wake Up and Smell the Coffee\n" +
                    "Monday Motivation\n" +
                    "Songs to Sing in the Shower");
        };

        private static final ICommand categoriesCommand = (args) -> {
            Spotify.GET();
            Console.println("---CATEGORIES---");
            Console.println("Top Lists\n" +
                    "Pop\n" +
                    "Mood\n" +
                    "Latin");
        };

        private static final ICommand playlistsCommand = (args) -> {
            Spotify.GET();
            String playlistName = (String) args[0];
            Console.print("---%s PLAYLISTS---", playlistName.toUpperCase());
            Console.println("Walk Like A Badass  \n" +
                    "Rage Beats  \n" +
                    "Arab Mood Booster  \n" +
                    "Sunday Stroll");
        };

        private static final ICommand authCommand = (args) -> {
            Console.println(Spotify.doAuth());
            Console.println("---SUCCESS---");
        };

        private static final ICommand exitCommand = (args) -> {
            Console.println("---GOODBYE!---");
            running = false;
        };

        private static final Map<String, ICommand> commandMap = new HashMap<>();


        public static void initialize() {
            commandMap.put("new", newCommand);
            commandMap.put("featured", featuredCommand);
            commandMap.put("categories", categoriesCommand);
            commandMap.put("playlists", playlistsCommand);
            commandMap.put("auth", authCommand);
            commandMap.put("exit", exitCommand);
        }

        public static void invoke() {
            String input = Console.getLine();
            ICommand command;
            Object[] args;
            if (input.contains(" ")) {
                String[] tokens = input.split(" ");
                command = getCommandFromName(tokens[0]);
                args = new Object[]{tokens[1]};
            } else {
                command = getCommandFromName(input);
                args = null;
            }
            try {
                command.execute(args);
            } catch (UnauthorizedException e) {
                Console.println(e.getMessage());
            }
        }

        public static ICommand getCommandFromName(String name) throws UnknownCommandException {
            if (commandMap.containsKey(name)) {
                return commandMap.get(name);
            }
            throw new UnknownCommandException();
        }

        public static boolean isRunning() {
            return running;
        }
    }
  learner_created: true
- name: src/advisor/exceptions/UnknownCommandException.java
  visible: true
  text: |
    package advisor.exceptions;

    public class UnknownCommandException extends RuntimeException {
        public UnknownCommandException() {
            super("Unknown command.", null);
        }
    }
  learner_created: true
- name: src/advisor/api/Spotify.java
  visible: true
  text: |
    package advisor.api;

    import advisor.exceptions.UnauthorizedException;

    public class Spotify {
        private static final String clientID = "0d7cdbd67fde4af792a1745e5c10605f";
        private static final String redirectUrl = "http://localhost:8080";
        private static final String OAuthUrl = "https://accounts.spotify.com/authorize?client_id=%s&redirect_uri=%s&response_type=code";

        private static boolean authenticated = false;

        public static String doAuth() {
            authenticated = true;
            return String.format(OAuthUrl, clientID, redirectUrl);
        }

        public static void POST() throws UnauthorizedException {
            if (!authenticated) throw new UnauthorizedException();
        }

        public static void GET() throws UnauthorizedException {
            if (!authenticated) throw new UnauthorizedException();
        }

        public static boolean isAuthenticated() {
            return isAuthenticated();
        }
    }
  learner_created: true
- name: src/advisor/utils/Console.java
  visible: true
  text: |
    package advisor.utils;

    import java.util.Scanner;

    public class Console {
        public static final Scanner scanner = new Scanner(System.in);

        public static String getLine() {
            return scanner.nextLine();
        }

        public static void print(String str, Object ... args) {
            printf(str, args);
            println();
        }

        public static void printf(String str, Object ... args) {
            System.out.printf(str, args);
        }

        public static void println() {
            System.out.println();
        }

        public static void println(String str) {
            System.out.println(str);
        }
    }
  learner_created: true
- name: src/advisor/ui/ICommand.java
  visible: true
  text: |
    package advisor.ui;

    public interface ICommand {
        void execute(Object ... args);
    }
  learner_created: true
- name: src/advisor/exceptions/UnauthorizedException.java
  visible: true
  text: |
    package advisor.exceptions;

    public class UnauthorizedException extends RuntimeException {
        public UnauthorizedException() {
            super("Please, provide access for application.", null);
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/62/stages/337/implement#comment
status: Unchecked
record: -1
