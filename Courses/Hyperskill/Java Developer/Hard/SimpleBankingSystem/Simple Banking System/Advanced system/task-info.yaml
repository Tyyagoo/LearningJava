type: edu
custom_name: stage4
files:
- name: src/banking/Main.java
  visible: true
  text: |-
    package banking;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/SimpleBankSystemTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.junit.AfterClass;
    import org.junit.BeforeClass;

    import java.io.File;
    import java.io.IOException;
    import java.nio.file.Files;
    import java.nio.file.Path;
    import java.nio.file.Paths;
    import java.sql.*;
    import java.util.HashMap;
    import java.util.Map;
    import java.util.Random;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class SimpleBankSystemTest extends StageTest<String> {

        private static final String databaseFileName = "card.s3db";
        private static final String tempDatabaseFileName = "tempDatabase.s3db";
        private static final String[] args = {"-fileName", databaseFileName};
        private static final Map<String, String> correctData = new HashMap<>();

        private static final Pattern cardNumberPattern = Pattern.compile("^400000\\d{10}$", Pattern.MULTILINE);
        private static final Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);

        private static Connection connection;


        @DynamicTest
        CheckResult test1_checkDatabaseFile() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            File file = new File(databaseFileName);

            if (!file.exists()) {
                return CheckResult.wrong("You should create a database file " +
                    "named " + databaseFileName + ". The file name should be taken from the command line arguments.\n" +
                    "The database file shouldn't be deleted after stopping the program!");
            }

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test2_checkConnection() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            getConnection();
            closeConnection();

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test3_checkIfTableExists() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            try {
                ResultSet resultSet = getConnection().createStatement().executeQuery(
                    "SELECT name FROM sqlite_master WHERE type ='table' AND name NOT LIKE 'sqlite_%';");
                while (resultSet.next()) {
                    if (resultSet.getString("name").equals("card")) {
                        closeConnection();
                        return CheckResult.correct();
                    }
                }
            } catch (SQLException e) {
                closeConnection();
                return CheckResult.wrong("Can't execute a query in your database! Make sure that your database isn't broken and you close your connection at the end of the program!");
            }

            closeConnection();
            return CheckResult.wrong("Your database doesn't have a table named 'card'");
        }

        @DynamicTest
        CheckResult test4_checkColumns() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            try {

                ResultSet resultSet = getConnection().createStatement().executeQuery("PRAGMA table_info(card);");
                Map<String, String> columns = new HashMap<>();

                while (resultSet.next()) {
                    columns.put(resultSet.getString("name").toLowerCase(), resultSet.getString("type").toUpperCase());
                }

                String[][] correctColumns = {
                    {"id", "INTEGER", "INT"},
                    {"number", "TEXT", "VARCHAR"},
                    {"pin", "TEXT", "VARCHAR"},
                    {"balance", "INTEGER", "INT"}};

                for (String[] correctColumn : correctColumns) {
                    String errorMessage = "Can't find '" + correctColumn[0] + "' column with '" + correctColumn[1] + "' type.\n" +
                        "Your table should have columns described in " +
                        "the stage instructions.";
                    if (!columns.containsKey(correctColumn[0])) {
                        return CheckResult.wrong(errorMessage);
                    } else if (!columns.get(correctColumn[0]).contains(correctColumn[1]) && !columns.get(correctColumn[0]).contains(correctColumn[2])) {
                        return CheckResult.wrong(errorMessage);
                    }
                }
            } catch (SQLException e) {
                return CheckResult.wrong("Can't connect to the database!");
            }

            closeConnection();
            return CheckResult.correct();
        }


        @DynamicTest
        CheckResult test5_checkAddingRowsToTheTable() {

            deleteAllRows();

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            stopAndCheckIfUserProgramWasStopped(program);

            try {

                ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM card");
                Map<String, String> userData = new HashMap<>();

                while (resultSet.next()) {
                    System.out.println(resultSet.getString("number"));
                    if (resultSet.getString("number") == null) {
                        return CheckResult.wrong("The card number shouldn't be null in the database!");
                    }
                    if (resultSet.getInt("balance") != 0) {
                        return CheckResult.wrong("Default balance value should be 0 in the database!");
                    }
                    if (resultSet.getString("pin") == null) {
                        return CheckResult.wrong("The PIN shouldn't be null in the database!");
                    }
                    userData.put(resultSet.getString("number"), resultSet.getString("pin"));
                }

                for (Map.Entry<String, String> entry : correctData.entrySet()) {
                    if (!userData.containsKey(entry.getKey())) {
                        return CheckResult.wrong("Your database doesn't save newly created cards.");
                    } else if (!userData.get(entry.getKey()).equals(entry.getValue())) {
                        return CheckResult.wrong("Correct PIN for card number " + entry.getKey() + " should " +
                            "be " + entry.getValue());
                    }
                }


            } catch (SQLException e) {
                return CheckResult.wrong("Can't connect the database!");
            }

            closeConnection();
            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test6_checkLogIn() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return CheckResult.wrong("You are printing the card number " +
                    "incorrectly. The card number should look like in the example:" +
                    " 400000DDDDDDDDDD, where D is a digit.");
            }

            Matcher pinMatcher = pinPattern.matcher(output);

            if (!pinMatcher.find()) {
                return CheckResult.wrong("You are printing the card PIN " +
                    "incorrectly. The PIN should look like in the example: DDDD, where D is a digit.");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + correctPin);

            if (!output.toLowerCase().contains("successfully")) {
                return CheckResult.wrong("The user should be signed in after" +
                    " entering the correct card information.");
            }

            stopAndCheckIfUserProgramWasStopped(program);

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test7_checkLogInWithWrongPin() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return CheckResult.wrong("You should output card number and PIN like in example");
            }

            String correctCardNumber = cardNumberMatcher.group();
            String correctPin = pinMatcher.group();

            Random random = new Random();

            String incorrectPin = correctPin;

            while (correctPin.equals(incorrectPin)) {
                incorrectPin = String.valueOf(1000 + random.nextInt(8999));
            }

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + incorrectPin);

            if (output.toLowerCase().contains("successfully")) {
                return CheckResult.wrong("The user should not be signed in" +
                    " after entering incorrect card information.");
            }

            stopAndCheckIfUserProgramWasStopped(program);
            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test8_checkLogInToNotExistingAccount() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return CheckResult.wrong("You should output card number and PIN like in example");
            }

            String correctCardNumber = cardNumberMatcher.group();
            String correctPin = pinMatcher.group();

            Random random = new Random();

            String incorrectCardNumber = correctCardNumber;

            while (correctCardNumber.equals(incorrectCardNumber)) {
                incorrectCardNumber = "400000" + (1_000_000_00 + random.nextInt(8_000_000_00));
            }

            program.execute("2");
            output = program.execute(incorrectCardNumber + "\n" + correctPin);

            if (output.toLowerCase().contains("successfully")) {
                return CheckResult.wrong("The user should not be signed in" +
                    " after entering incorrect card information.");
            }

            stopAndCheckIfUserProgramWasStopped(program);
            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test9_checkBalance() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return CheckResult.wrong("You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);

            output = program.execute("1");

            if (!output.contains("0")) {
                return CheckResult.wrong("Expected balance: 0");
            }

            stopAndCheckIfUserProgramWasStopped(program);
            return CheckResult.correct();
        }

        // ttest is not a typo!
        @DynamicTest
        CheckResult ttest10_checkAddIncome() {

            deleteAllRows();

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);
            program.execute("2\n10000");
            stopAndCheckIfUserProgramWasStopped(program);

            int userBalance = getBalance(correctCardNumber);
            if (userBalance != 10000) {
                return CheckResult.wrong("Account balance int the database is wrong after adding income.\nExpected 10000");
            }

            program = new TestedProgram();
            program.start(args);

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);
            program.execute("2\n15000");
            stopAndCheckIfUserProgramWasStopped(program);

            userBalance = getBalance(correctCardNumber);
            if (userBalance != 25000) {
                return CheckResult.wrong("Account balance is wrong after adding income.\nExpected 25000");
            }

            return CheckResult.correct();
        }

        // ttest is not a typo!
        @DynamicTest
        CheckResult ttest11_checkTransfer() {

            String incorrectCardNumber = "2000007269641764"; //Doesn't pass Luhn algorithm
            String notExistingCardNumber = "2000007269641768";

            deleteAllRows();

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return new CheckResult(false, "Your program outputs card number " +
                    "wrong.\nCard number should look like 400000DDDDDDDDDD. Where D is some digit");
            }

            String toTransferCardNumber = cardNumberMatcher.group();

            output = program.execute("1");

            cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);
            output = program.execute("3\n" + incorrectCardNumber);

            if (!output.contains("mistake")) {
                return new CheckResult(false, "You should not allow to transfer " +
                    "to a card number that doesn't pass the Luhn algorithm.\n You should print " +
                    "'Probably you made mistake in the card number. Please try again!'");
            }

            output = program.execute("3\n" + notExistingCardNumber);

            if (!output.contains("exist")) {
                return new CheckResult(false, "You should not allow to transfer " +
                    "to a card number that does not exist.\nYou should print " +
                    "'Such a card does not exist.'");
            }

            output = program.execute("3\n" + toTransferCardNumber + "\n100000");
            if (!output.toLowerCase().contains("not enough money")) {
                return new CheckResult(false, "You should not allow a transfer if " +
                    "there is not enough money in the account to complete it. You should print " +
                    "'Not enough money!'");
            }

            program.execute("2\n20000\n3\n" + toTransferCardNumber + "\n10000");

            stopAndCheckIfUserProgramWasStopped(program);

            int correctBalanceForBothAccounts = 10000;
            int toTransferCardBalance = getBalance(toTransferCardNumber);
            int correctCardNumberBalance = getBalance(correctCardNumber);

            if (toTransferCardBalance != correctBalanceForBothAccounts) {
                return new CheckResult(false, "Incorrect account balance of the card to which the transfer was made.");
            }

            if (correctCardNumberBalance != correctBalanceForBothAccounts) {
                return new CheckResult(false, "Incorrect account balance of the card used to make the transfer.");
            }

            return CheckResult.correct();
        }

        // ttest is not a typo!
        @DynamicTest
        CheckResult ttest12_checkTransfer() {

            deleteAllRows();

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2\n" + correctCardNumber + "\n" + correctPin + "\n4");

            stopAndCheckIfUserProgramWasStopped(program);

            try {
                PreparedStatement statement = getConnection().prepareStatement("SELECT * FROM card where number = ?");
                statement.setString(1, correctCardNumber);
                ResultSet resultSet = statement.executeQuery();
                if (resultSet.next()) {
                    return new CheckResult(false, "After closing the account, the card should be deleted " +
                        "from the database.");
                }
            } catch (SQLException e) {
                throw new WrongAnswer("Can't execute a query in your database! Make sure that your database isn't broken and you close your connection at the end of the program!");
            }

            closeConnection();
            return CheckResult.correct();
        }

        private static Connection getConnection() {
            if (connection == null) {
                try {
                    connection = DriverManager.getConnection("jdbc:sqlite:" + databaseFileName);
                } catch (SQLException exception) {
                    throw new WrongAnswer("Can't connect to the database! Make sure you close your database" +
                        " connection at the end of the program!");
                }
            }
            return connection;
        }

        private static void closeConnection() {
            if (connection == null)
                return;
            try {
                connection.close();
            } catch (SQLException ignored) {
            }
            connection = null;
        }

        @BeforeClass
        public static void createTempDatabase() throws IOException {

            closeConnection();

            Path userDbFile = Paths.get(databaseFileName);
            Path tempDbFile = Paths.get(tempDatabaseFileName);

            if (!userDbFile.toFile().exists())
                return;

            try {
                Files.deleteIfExists(tempDbFile);
                Files.copy(userDbFile, tempDbFile);
            } catch (Exception ignored) {
            }
        }

        @AfterClass
        public static void deleteTempDatabase() throws IOException {

            closeConnection();

            Path userDbFile = Paths.get(databaseFileName);
            Path tempDbFile = Paths.get(tempDatabaseFileName);

            if (!tempDbFile.toFile().exists())
                return;

            try {
                Files.deleteIfExists(userDbFile);
                Files.move(tempDbFile, userDbFile);
            } catch (Exception ignored) {
            }
        }

        private boolean getData(String out) {

            Pattern cardNumberPattern = Pattern.compile("400000\\d{10}");
            Matcher cardNumberMatcher = cardNumberPattern.matcher(out);

            Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);
            Matcher pinMatcher = pinPattern.matcher(out);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return false;
            }

            String number = cardNumberMatcher.group();
            String PIN = pinMatcher.group();

            if (!checkLuhnAlgorithm(number)) {
                return false;
            }

            correctData.put(number, PIN);

            return true;
        }

        private boolean checkLuhnAlgorithm(String cardNumber) {
            int result = 0;
            for (int i = 0; i < cardNumber.length(); i++) {
                int digit = Character.getNumericValue(cardNumber.charAt(i));
                if (i % 2 == 0) {
                    int doubleDigit = digit * 2 > 9 ? digit * 2 - 9 : digit * 2;
                    result += doubleDigit;
                    continue;
                }
                result += digit;
            }
            return result % 10 == 0;
        }

        private void deleteAllRows() {
            try {
                getConnection().createStatement().execute("DELETE FROM card");
                closeConnection();
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute a query in your database! Make sure that your database isn't broken and you close your connection at the end of the program!");
            }
        }

        private void stopAndCheckIfUserProgramWasStopped(TestedProgram program) {
            program.execute("0");
            if (!program.isFinished()) {
                throw new WrongAnswer("After choosing 'Exit' item you should stop your program" +
                    " and close database connection!");
            }
        }

        private static int getBalance(String cardNumber) {
            try {
                PreparedStatement preparedStatement = getConnection().prepareStatement("SELECT * FROM card WHERE number = ?");
                preparedStatement.setString(1, cardNumber);
                ResultSet resultSet = preparedStatement.executeQuery();
                resultSet.next();
                int result = resultSet.getInt("balance");
                closeConnection();
                return result;
            } catch (SQLException e) {
                throw new WrongAnswer("Can't execute a query in your database! Make sure that your database isn't broken and you close your connection at the end of the program!");
            }
        }
    }
  learner_created: false
- name: src/banking/system/Bank.java
  visible: true
  text: |
    package banking.system;

    import banking.exceptions.InvalidCredentialsException;
    import banking.exceptions.NonExistentAccountException;
    import banking.service.Account;
    import banking.ui.AbstractUserInterface;
    import banking.ui.MainMenu;

    import java.sql.SQLException;
    import java.sql.SQLOutput;
    import java.util.Random;
    import java.util.Scanner;

    public class Bank {

        public static final char[] bankIdentificationNumber = {'4', '0', '0', '0', '0', '0'};
        public static final int binLength = 6;
        public static final int numberLength = 16;
        public static final int pinLength = 4;

        private static Scanner scanner = null;
        private static AbstractUserInterface rootMenu = null;
        private static Database database = null;

        public static void initialize(Scanner scanner, String dataBaseFilename) {
            Bank.scanner = scanner;
            String url = String.format("jdbc:sqlite:%s", dataBaseFilename);
            database = new Database(url);
            database.initialize();
            rootMenu = new MainMenu(scanner);
        }

        public static void process() {
            while (!rootMenu.isStopped()) {
                rootMenu.invoke();
            }
            System.out.println("Bye!");
        }

        public static void registryAccount(Account account) {
            database.insertAccount(account);
        }

        public static Account getAccount(String number) throws InvalidCredentialsException, NonExistentAccountException {
            return database.getAccount(number);
        }

        public static String generateAccountNumber() {
            StringBuilder numberBuilder = new StringBuilder();
            numberBuilder.append(String.valueOf(bankIdentificationNumber));

            Random randomizer = new Random();
            for (int i = binLength; i < numberLength - 1; i++) {
                numberBuilder.append(randomizer.nextInt(10));
            }

            int sum = 0;
            String currentString = numberBuilder.toString();
            for (int i = 0; i < currentString.length(); i++) {
                int digit = Integer.parseInt(String.valueOf(currentString.charAt(i)));
                if ((i + 1) % 2 != 0) digit *= 2;
                if (digit > 9) digit -= 9;
                sum += digit;
            }

            int checksum;
            if (sum % 10 == 0) checksum = 0;
            else checksum = 10 - (sum % 10);
            numberBuilder.append(checksum);
            return numberBuilder.toString();
        }

        public static boolean checkNumber(String number) {
            int i, sum = 0;
            for (i = 1; i < numberLength; i++) {
                int n = Integer.parseInt(String.valueOf(number.charAt(i - 1)));
                if (i % 2 != 0) n *= 2;
                if (n > 9) n -= 9;
                sum += n;
            }
            sum += Integer.parseInt(String.valueOf(number.charAt(i - 1)));
            return sum % 10 == 0;
        }
    }
  learner_created: true
- name: src/banking/ui/commands/ShowBalance.java
  visible: true
  text: |
    package banking.ui.commands;

    import banking.exceptions.NonExistentAccountException;
    import banking.service.Account;

    import java.util.Scanner;

    public class ShowBalance implements ICommand<Account> {

        @Override
        public Callback<Account> execute(Scanner scanner, Object... args) {
            if (args.length != 0) {
                try {
                    Account acc = (Account) args[0];
                    System.out.printf("Balance: %d%n", acc.getBalance().intValue());
                    return new Callback<>(acc);
                } catch (Exception e) {
                    throw new NonExistentAccountException();
                }
            }
            throw new NonExistentAccountException();
        }
    }
  learner_created: true
- name: src/banking/service/Account.java
  visible: true
  text: |
    package banking.service;

    import banking.system.Bank;
    import banking.service.cards.Card;
    import banking.service.cards.CardFactory;

    import java.math.BigDecimal;

    public class Account {

        private final String number;
        private Card card;


        public Account() {
            number = Bank.generateAccountNumber();
            System.out.println("Your card number:");
            System.out.printf("%s%n", number);
            this.card = CardFactory.createCard(number);
        }

        public Account(String number, String pin, BigDecimal balance) {
            this.number = number;
            this.card = CardFactory.createCard(number, pin, balance);
        }

        public String getNumber() {
            return number;
        }

        public Card getCard() {
            return card;
        }

        public BigDecimal getBalance() {
            return card.getBalance();
        }
    }
  learner_created: true
- name: src/banking/ui/commands/CreateAccount.java
  visible: true
  text: |
    package banking.ui.commands;


    import banking.service.Account;
    import banking.service.AccountService;
    import java.util.Scanner;

    public class CreateAccount implements ICommand<Account> {

        @Override
        public Callback<Account> execute(Scanner scanner, Object... args) {
            Account account = AccountService.createNewAccount();
            return new Callback<>(account);
        }
    }
  learner_created: true
- name: src/banking/ui/commands/Callback.java
  visible: true
  text: |
    package banking.ui.commands;

    public class Callback<T> {
        private final T callback;

        public Callback(T callback) {
            this.callback = callback;
        }

        public T getResult() {
            return callback;
        }
    }
  learner_created: true
- name: src/banking/ui/MainMenu.java
  visible: true
  text: |
    package banking.ui;


    import banking.service.Account;
    import banking.ui.commands.Callback;
    import banking.ui.commands.CreateAccount;
    import banking.ui.commands.ICommand;
    import banking.ui.commands.LoginAccount;

    import java.util.Scanner;

    public class MainMenu extends AbstractUserInterface {

        private static final ICommand<Account> optionOne = new CreateAccount();
        private static final ICommand<Account> optionTwo = new LoginAccount();

        private AbstractUserInterface subMenu = null;

        public MainMenu(Scanner scanner) {
            super(scanner);
        }

        @Override
        public void invoke() {
            showOptions();
            Callback callback = getUserInput();
            if (callback == null) return;
            if (callback.getResult() == ExitContext.EXIT_PROGRAM) {
                finishProgram = true;
                return;
            }

            if (callback.getResult() == ExitContext.EXIT_MENU) {
                subMenu = null;
                return;
            }
            Account acc = (Account) callback.getResult();
        }

        @Override
        protected void showOptions() {
            System.out.println("1. Create an account");
            System.out.println("2. Log into account");
            System.out.println("0. Exit");
        }

        @Override
        protected Callback getUserInput() {
            int choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    return optionOne.execute(scanner);
                case 2:
                    Callback<Account> callback = optionTwo.execute(scanner);
                    if (callback == null) return null;
                    subMenu = new AccountMenu(scanner, callback.getResult());

                    while (!(subMenu.isFinished() || subMenu.isStopped())) {
                        subMenu.invoke();
                    }

                    if (subMenu.isStopped()) return exitCommand.execute(scanner);
                    return backCommand.execute(scanner);

                default:
                    return exitCommand.execute(scanner);
            }
        }
    }
  learner_created: true
- name: src/banking/ui/AccountMenu.java
  visible: true
  text: |
    package banking.ui;

    import banking.service.Account;
    import banking.ui.commands.Callback;
    import banking.ui.commands.ICommand;
    import banking.ui.commands.ShowBalance;

    import java.util.Scanner;

    public class AccountMenu extends AbstractUserInterface {

        private final Account account;
        private static final ICommand<Account> optionOne = new ShowBalance();

        AccountMenu(Scanner scanner, Account account) {
            super(scanner);
            this.account = account;
        }

        @Override
        public void invoke() {
            showOptions();
            Callback callback = getUserInput();
            if (callback.getResult() == ExitContext.EXIT_PROGRAM) {
                finishProgram = true;
                return;
            }
            if (callback.getResult() == ExitContext.EXIT_MENU) {
                finishMenu = true;
                return;
            }
        }

        @Override
        protected void showOptions() {
            System.out.println("1. Balance");
            System.out.println("2. Log out");
            System.out.println("0. Exit");
        }

        @Override
        protected Callback getUserInput() {
            int choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    return optionOne.execute(scanner, account);
                case 2:
                    System.out.println("You have successfully logged out!");
                    return backCommand.execute(scanner);
                default:
                    return exitCommand.execute(scanner);
            }
        }
    }
  learner_created: true
- name: card.s3db
  visible: true
  text: "SQLite format 3\0\x04\0\x01\x01\0@  \0\0\0\v\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\
    \0\x01\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\v\0-�\v\n\0\0\0\x01\x03�\0\x03�\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0p\x01\a\x17\x15\x15\x01�Ctablecardcard\x02CREATE TABLE\
    \ card (\nid INTEGER PRIMARY KEY,\nnumber TEXT,pin TEXT,balance INTEGER DEFAULT\
    \ 0)\n\0\0\0\t\x03\n\0\x03�\x03�\x03�\x03�\x03y\x03^\x03C\x03(\x03\n\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
    \0\0\0\0\0\0\0\0\0\x19\t\x05\0-\x15\b40000070552304597996\x19\b\x05\0-\x15\b40000029360531478441\x19\
    \a\x05\0-\x15\b40000016592647090321\x19\x06\x05\0-\x15\b40000087347905174974\x19\
    \x05\x05\0-\x15\b40000088643025961587\x19\x04\x05\0-\x15\b40000056239421756368\x19\
    \x03\x05\0-\x15\b40000036174066040334\x19\x02\x05\0-\x15\b40000012047933199056\x19\
    \x01\x05\0-\x15\b40000080640995476531"
  learner_created: true
- name: src/banking/ui/commands/ICommand.java
  visible: true
  text: |+
    package banking.ui.commands;

    import java.util.Scanner;

    public interface ICommand<T> {
        Callback<T> execute(Scanner scanner, Object... args);
    }

  learner_created: true
- name: src/banking/service/cards/CardFactory.java
  visible: true
  text: |
    package banking.service.cards;

    import java.math.BigDecimal;

    public class CardFactory {


        public static Card createCard(String number) {
            // use Card(number);
            return new Card(number);
        }

        public static Card createCard(String number, String pin, BigDecimal balance) {
            return new Card(number, pin, balance);
        }
    }
  learner_created: true
- name: src/banking/service/cards/Card.java
  visible: true
  text: |
    package banking.service.cards;

    import banking.system.Bank;

    import java.math.BigDecimal;
    import java.util.Random;

    public class Card {

        private final String number;
        private final String pin;
        private BigDecimal balance = new BigDecimal(0);

        Card(String number) { // for create new cards
            this.number = number;

            Random randomizer = new Random();
            StringBuilder pinBuilder = new StringBuilder();
            for (int i = 0; i < Bank.pinLength; i++) {
                pinBuilder.append(randomizer.nextInt(10));
            }
            pin = pinBuilder.toString();
            // Show pin only on the creation of account.
            System.out.printf("Your card PIN:%n%s%n", pin);
        }

        Card(String number, String pin, BigDecimal balance) { // for load existing cards
            this.number = number;
            this.pin = pin;
            this.balance = balance;
        }

        public String getNumber() {
            return number;
        }

        public String getPin() { return pin; }

        public boolean isValidPin(String credential) {
            return pin.equals(credential);
        }

        public BigDecimal getBalance() {
            return balance;
        }
    }
  learner_created: true
- name: src/banking/exceptions/NonExistentAccountException.java
  visible: true
  text: |
    package banking.exceptions;

    public class NonExistentAccountException extends RuntimeException {
        public NonExistentAccountException() {
            super("Invalid Account.", null);
        }
    }
  learner_created: true
- name: src/banking/ui/commands/LoginAccount.java
  visible: true
  text: |
    package banking.ui.commands;

    import banking.system.Bank;
    import banking.exceptions.InvalidCredentialsException;
    import banking.service.Account;
    import banking.service.AccountService;
    import java.util.Scanner;

    public class LoginAccount implements ICommand<Account> {

        @Override
        public Callback<Account> execute(Scanner scanner, Object... args) {
            String number = "";
            String pin = "";
            System.out.println("Enter your card number:");
            while (number.length() < 1) {
                number = scanner.nextLine();
            }
            System.out.println("Enter your PIN:");
            while (pin.length() < 1) {
                pin = scanner.nextLine();
            }

            try {
                Account acc = AccountService.logIntoAccount(number, pin);
                System.out.println("You have successfully logged in!");
                return new Callback<>(acc);
            } catch (InvalidCredentialsException e) {
                System.out.println(e.getMessage());
            }

            return null;
        }
    }
  learner_created: true
- name: src/banking/system/Database.java
  visible: true
  text: "package banking.system;\n\nimport banking.exceptions.InvalidCredentialsException;\n\
    import banking.exceptions.NonExistentAccountException;\nimport banking.service.Account;\n\
    import banking.service.cards.Card;\nimport org.sqlite.SQLiteDataSource;\n\nimport\
    \ java.math.BigDecimal;\nimport java.sql.*;\n\nclass Database {\n\n    private\
    \ final String url;\n    private final SQLiteDataSource dataSource = new SQLiteDataSource();\n\
    \    \n    Database(String url) {\n        this.url = url;\n        dataSource.setUrl(url);\n\
    \    }\n\n    void initialize() {\n        try (Connection cxn = dataSource.getConnection())\
    \ {\n            try (Statement stmt = cxn.createStatement()) {\n            \
    \    stmt.executeUpdate(\"CREATE TABLE IF NOT EXISTS card (\\n\" +\n         \
    \               \"id INTEGER PRIMARY KEY,\\n\" +\n                        \"number\
    \ TEXT,\" +\n                        \"pin TEXT,\" +\n                       \
    \ \"balance INTEGER DEFAULT 0\" +\n                        \");\");\n        \
    \    } catch (SQLException e) {\n                System.out.println(e.getMessage());\n\
    \            }\n        } catch (SQLException e) {\n            System.out.println(e.getMessage());\n\
    \        }\n    }\n\n    void insertAccount(Account account) {\n        String\
    \ sql = \"INSERT INTO card(number,pin,balance) VALUES(?,?,?)\";\n        try (Connection\
    \ cxn = dataSource.getConnection()) {\n            try (PreparedStatement stmt\
    \ = cxn.prepareStatement(sql)) {\n                stmt.setString(1, account.getNumber());\n\
    \                stmt.setString(2, account.getCard().getPin());\n            \
    \    stmt.setInt(3, account.getBalance().intValue());\n                stmt.executeUpdate();\n\
    \            }\n            catch (SQLException e) {\n                System.out.println(e.getMessage());\n\
    \            }\n        } catch (SQLException e) {\n            System.out.println(e.getMessage());\n\
    \        }\n    }\n\n    Account getAccount(String number) throws InvalidCredentialsException,\
    \ NonExistentAccountException {\n        if (number.length() != Bank.numberLength)\
    \ throw new NonExistentAccountException();\n\n        String sql = \"SELECT pin,\
    \ balance \"\n                    + \"FROM card WHERE number = ?\";\n\n      \
    \  try (Connection cxn = dataSource.getConnection()) {\n            try (PreparedStatement\
    \ stmt  = cxn.prepareStatement(sql)) {\n                stmt.setString(1, number);\n\
    \                try (ResultSet result = stmt.executeQuery()) {\n            \
    \        if (result.next()) {\n                        String pin = result.getString(\"\
    pin\");\n                        BigDecimal balance = new BigDecimal(result.getInt(\"\
    balance\"));\n                        return new Account(number, pin, balance);\n\
    \                    }\n                    throw new InvalidCredentialsException();\n\
    \                } catch (SQLException e) {\n                    System.out.println(e.getMessage());\n\
    \                }\n            } catch (SQLException e) {\n                System.out.println(e.getMessage());\n\
    \            }\n        } catch (SQLException e) {\n            System.out.println(e.getMessage());\n\
    \        }\n        return null;\n    }\n\n}\n"
  learner_created: true
- name: src/banking/service/AccountService.java
  visible: true
  text: |
    package banking.service;

    import banking.system.Bank;
    import banking.exceptions.InvalidCredentialsException;


    public class AccountService {

        public static Account createNewAccount() {
            System.out.println("Your card has been created");
            Account account = new Account();
            registryAccount(account);
            return account;
        }

        private static void registryAccount(Account account) {
            Bank.registryAccount(account);
        }

        public static Account logIntoAccount(String number, String pin) throws InvalidCredentialsException {
            if(number.length() != Bank.numberLength || pin.length() != Bank.pinLength) throw new InvalidCredentialsException();
            if (!Bank.checkNumber(number)) throw new InvalidCredentialsException(); // invalid Luhn
            Account acc = getAccountByNumber(number); // can throw InvalidCredentialsException
            if (acc.getCard().isValidPin(pin)) return acc;
            throw new InvalidCredentialsException(); // if pin isn't the same, throw InvalidCredentials
        }

        private static Account getAccountByNumber(String number) throws InvalidCredentialsException {
            try {
                return Bank.getAccount(number);
            } catch (Exception e) {
                throw new InvalidCredentialsException();
            }
        }

        private static boolean numbersAreEqual(String n1, String n2) {
            return n1.equals(n2);
        }


    }
  learner_created: true
- name: src/banking/exceptions/InvalidCredentialsException.java
  visible: true
  text: |
    package banking.exceptions;

    public class InvalidCredentialsException extends RuntimeException {
        public InvalidCredentialsException() {
            super("Wrong card number or PIN!", null);
        }
    }
  learner_created: true
- name: src/banking/ui/AbstractUserInterface.java
  visible: true
  text: |
    package banking.ui;

    import banking.ui.commands.Callback;
    import banking.ui.commands.ICommand;

    import java.util.Scanner;

    public abstract class AbstractUserInterface {

        enum ExitContext {
            EXIT_MENU,
            EXIT_PROGRAM;
        }

        protected final ICommand<ExitContext> exitCommand = (scanner, args) -> new Callback<>(ExitContext.EXIT_PROGRAM);
        protected  final ICommand<ExitContext> backCommand = (scanner, args) -> new Callback<>(ExitContext.EXIT_MENU);

        protected final Scanner scanner;
        protected boolean finishProgram = false;
        protected boolean finishMenu = false;

        AbstractUserInterface(Scanner scanner) {
            this.scanner = scanner;
        }

        public abstract void invoke();
        protected abstract void showOptions();
        protected abstract Callback getUserInput();

        public boolean isStopped() {
            return finishProgram;
        }
        public boolean isFinished() { return finishMenu; }

        public Scanner getScanner() {
            return scanner;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/93/stages/518/implement#comment
status: Unchecked
record: -1
