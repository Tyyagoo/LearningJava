type: edu
custom_name: stage6
files:
- name: src/calculator/Main.java
  visible: true
  text: |
    package calculator;

    import java.util.Scanner;

    public class Main {

        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);
            // put your code here
        }
    }
  learner_created: false
- name: test/Test.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.SimpleTestCase;
    import org.hyperskill.hstest.testcase.TestCase;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.Arrays;
    import java.util.List;

    public class Test extends StageTest<String> {

        @Override
        public List<TestCase<String>> generate() {
            return Arrays.asList(
                    new TestCase<String>().setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram();

                        // tests of functionality of previous steps
                        main.start();

                        // test of /help
                        String output = main.execute("/help").trim();
                        if (output.length() < 4) {
                            return CheckResult.wrong("It seems like there was no any \"help\" message.");
                        }

                        // input empty string
                        output = main.execute("");
                        if (output.length() != 0) {
                            return CheckResult.wrong("Incorrect response to an empty string. " +
                                    "The program should not print anything.");
                        }

                        // sum of positive numbers
                        output = main.execute("5 + 1 + 4").trim();
                        if (!output.equals("10")) {
                            return CheckResult.wrong("The program cannot sum more than two numbers.");
                        }

                        // sum of numbers with different signs & negative answer
                        output = main.execute("23 - 17 - 13").trim();
                        if (!output.equals("-7")) {
                            return CheckResult.wrong("Incorrect sum of positive and negative numbers.");
                        }

                        // testing a big amount of numbers
                        output = main.execute("33 + 20 + 11 + 49 - 32 - 9 + 1 - 80 + 4").trim();
                        if (!output.equals("-3")) {
                            return CheckResult.wrong("The program cannot process a large number of numbers.");
                        }

                        // the sum of the numbers is zero
                        output = main.execute("11 - 7 - 4").trim();
                        if (!output.equals("0")) {
                            return CheckResult.wrong("The problem when sum is equal to 0 has occurred.");
                        }

    //                    // test of multiple operations
    //                    output = main.execute("5 --- 2 ++++++ 4 -- 2 ---- 1").trim();
    //                    if (!output.equals("10")) {
    //                        return CheckResult.wrong("The program cannot process multiple operations with several operators.");
    //                    }

                        // test of a nonexistent command
                        output = main.execute("/start").trim().toLowerCase();
                        if (!output.startsWith("unknown")) {
                            return CheckResult.wrong("The program should print \"Unknown command\" " +
                                    "when a nonexistent command is entered.");
                        }

                        // test of /exit
                        output = main.execute("/exit").trim().toLowerCase();
                        if (!output.startsWith("bye")) {
                            return CheckResult.wrong("Your program didn't print \"bye\" after entering \"/exit\".");
                        }

                        return new CheckResult(main.isFinished(), "Your program should exit after entering \"/exit\".");
                    }),
                    new TestCase<String>().setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram();

                        // testing different assignments
                        main.start();

                        // testing basic assignment
                        String output = main.execute("n = 5");
                        if (output.length() != 0) {
                            return CheckResult.wrong("Unexpected reaction after assignment." +
                                    "The program should not print anything in this case.");
                        }

                        // assignment without spaces
                        output = main.execute("m=2");
                        if (output.length() != 0) {
                            return CheckResult.wrong("Unexpected reaction after assignment." +
                                    "The program should not print anything in this case.");
                        }

                        // assignment with extra spaces
                        output = main.execute("a    =  7");
                        if (output.length() != 0) {
                            return CheckResult.wrong("Unexpected reaction after assignment." +
                                    "The program should not print anything in this case.");
                        }

                        // assign the value of another variable
                        output = main.execute("c=  a ");
                        if (output.length() != 0) {
                            return CheckResult.wrong("Unexpected reaction after assignment." +
                                    "The program should not print anything in this case.");
                        }

                        // test printing values of the variables
                        output = main.execute("a").trim();
                        if (!output.equals("7")) {
                            return CheckResult.wrong("The variable stores not a correct value.");
                        }

                        output = main.execute("c").trim();
                        if (!output.equals("7")) {
                            return CheckResult.wrong("The variable stores not a correct value." +
                                    "May be the program could not assign the value of one variable to another one.");
                        }

                        // trying to assign a new variable after printing
                        output = main.execute("test = 0");
                        if (output.length() != 0) {
                            return CheckResult.wrong("Unexpected reaction after assignment." +
                                    "The program should not print anything in this case.");
                        }

                        // check if assignment was successful
                        output = main.execute("test").trim();
                        if (!output.equals("0")) {
                            return CheckResult.wrong("The variable stores not a correct value.");
                        }

                        // trying to reassign
                        output = main.execute("test = 1");
                        if (output.length() != 0) {
                            return CheckResult.wrong("Unexpected reaction after assignment." +
                                    "The program should not print anything in this case.");
                        }

                        // trying to reassign with the value of another variable
                        output = main.execute("a = test");
                        if (output.length() != 0) {
                            return CheckResult.wrong("Unexpected reaction after assignment." +
                                    "The program should not print anything in this case.");
                        }

                        output = main.execute("a").trim();
                        if (!output.equals("1")) {
                            return CheckResult.wrong("The program could not reassign variable.");
                        }

                        // test of /exit
                        output = main.execute("/exit").trim().toLowerCase();
                        if (!output.startsWith("bye")) {
                            return CheckResult.wrong("Your program didn't print \"bye\" after entering \"/exit\".");
                        }

                        return new CheckResult(main.isFinished(), "Your program should exit after entering \"/exit\".");
                    }),
                    new TestCase<String>().setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram();

                        // testing operations with variables
                        main.start();

                        // created some variables
                        String output = main.execute("a = 9\nb=2\nc = 1").trim();
                        if (output.length() != 0) {
                            return CheckResult.wrong("Unexpected reaction after assignment." +
                                    "The program should not print anything in this case.");
                        }

                        // testing simple sum
                        output = main.execute("a + b").trim();
                        if (!output.equals("11")) {
                            return CheckResult.wrong("The program cannot perform operations with variables. " +
                                    "For example, addition operation.");
                        }

                        // subtraction testing
                        output = main.execute("b - a").trim();
                        if (!output.equals("-7")) {
                            return CheckResult.wrong("The program cannot perform operations with variables. " +
                                    "For example, subtraction operation.");
                        }

                        // adding a negative number
                        output = main.execute("b + c").trim();
                        if (!output.equals("3")) {
                            return CheckResult.wrong("The program cannot perform operations with variables. " +
                                    "For example, addition operation.");
                        }

                        // subtraction of negative number
                        output = main.execute("b - c").trim();
                        if (!output.equals("1")) {
                            return CheckResult.wrong("The program cannot perform operations with variables. " +
                                    "For example, subtraction operation.");
                        }

                        // testing multiple operations
                        output = main.execute("a -- b - c + 3 --- a ++ 1").trim();
                        if (!output.equals("5")) {
                            return CheckResult.wrong("The program cannot perform several operations in one line.");
                        }

                        // test of /exit
                        output = main.execute("/exit").trim().toLowerCase();
                        if (!output.startsWith("bye")) {
                            return CheckResult.wrong("Your program didn't print \"bye\" after entering \"/exit\".");
                        }

                        return new CheckResult(main.isFinished(), "Your program should exit after entering \"/exit\".");
                    }),
                    new TestCase<String>().setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram();

                        // a set of negative tests
                        main.start();

                        // testing invalid variable name
                        String output = main.execute("var1 = 1").trim().toLowerCase();
                        if (!output.startsWith("invalid")) {
                            return CheckResult.wrong("The name of variable should contain only Latin letters.");
                        }
                        output = main.execute("кириллица = 123").trim().toLowerCase();
                        if (!output.startsWith("invalid")) {
                            return CheckResult.wrong("The name of variable should contain only Latin letters.");
                        }

                        // testing invalid value
                        output = main.execute("var = 2a").trim().toLowerCase();
                        if (!output.startsWith("invalid")) {
                            return CheckResult.wrong("The value can be an integer number or a value of another variable.");
                        }

                        // testing multiple equalization
                        output = main.execute("c = 7 - 1 = 5").trim().toLowerCase();
                        if (!output.startsWith("invalid")) {
                            return CheckResult.wrong("The program could not handle a invalid assignment.");
                        }

                        // testing assignment by unassigned variable
                        output = main.execute("variable = f").trim().toLowerCase();
                        if (!(output.startsWith("unknown") || output.startsWith("invalid"))) {
                            return CheckResult.wrong("The program should not allow an assignment by unassigned variable.");
                        }

                        // checking case sensitivity
                        main.execute("variable = 777");
                        output = main.execute("Variable").trim().toLowerCase();
                        if (!output.startsWith("unknown")) {
                            return CheckResult.wrong("The program should be case sensitive.");
                        }

                        // test of /exit
                        output = main.execute("/exit").trim().toLowerCase();
                        if (!output.startsWith("bye")) {
                            return CheckResult.wrong("Your program didn't print \"bye\" after entering \"/exit\".");
                        }

                        return new CheckResult(main.isFinished(), "Your program should exit after entering \"/exit\".");
                    })
            );
        }
    }
  learner_created: false
- name: src/calculator/ui/Menu.java
  visible: true
  text: |
    package calculator.ui;

    import calculator.Calculator;
    import calculator.exceptions.UnknownCommandException;

    import java.util.Locale;
    import java.util.Scanner;
    import java.util.concurrent.Callable;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class Menu {

        private static final Scanner scanner = new Scanner(System.in);
        private static boolean running = true;

        private static final Pattern commandPattern = Pattern.compile("/[a-zA-Z]*");

        private static final ICommand helpCommand = (ignore) -> {
            System.out.println("The program calculates the sum of numbers");
        };
        private static final ICommand exitCommand = (ignore) -> {
            System.out.println("Bye!");
            running = false;
        };

        public static void invoke() {
            String inputLine = scanner.nextLine();
            if (inputLine.isBlank()) return;
            String formattedString = formatInput(inputLine);

            Matcher commandMatcher = commandPattern.matcher(formattedString);
            if (commandMatcher.matches()) {
                String desiredCommand = formattedString.replace("/", "").toLowerCase();
                if (desiredCommand.equals("help")) {
                    helpCommand.execute();
                    return;
                }
                if (desiredCommand.equals("exit")) {
                    exitCommand.execute();
                    return;
                }
                throw new UnknownCommandException();
            }

            Calculator.calculate(formattedString);
        }

        private static String formatInput(String input) {
            String output = input;

            /*
            Remove unnecessary whitespaces from string, and returns an new String.
             */
            Pattern unnecessaryWhiteSpacesPattern = Pattern.compile("\\s+");
            output = unnecessaryWhiteSpacesPattern.matcher(output).replaceAll(" ");

            /*
            Arranging the operators
             */
            Pattern stackablePlus = Pattern.compile("\\+{2,}");
            output = stackablePlus.matcher(output).replaceAll("+");

            Pattern stackableMinus = Pattern.compile("-{3}");
            output = stackableMinus.matcher(output).replaceAll("-");

            Pattern minusToPlus = Pattern.compile("-{2}");
            output = minusToPlus.matcher(output).replaceAll("+");

            Pattern allToMinus = Pattern.compile("(\\+-|-\\+)");
            output = allToMinus.matcher(output).replaceAll("-");

            /*
            Handle initial number being negative.
             */
            output = output.trim();
            if (output.charAt(0) == '-') return "0 " + output;
            else if (output.charAt(0) == '+') return output.replaceFirst("\\+", "").trim();
            return output;
        }

        public static boolean isRunning() { return running; }
    }
  learner_created: true
- name: src/calculator/logic/Calculation.java
  visible: true
  text: |
    package calculator.logic;

    import calculator.exceptions.UnbalancedExpressionException;
    import calculator.exceptions.UnsupportedOperationException;
    import java.util.*;
    import java.util.regex.Pattern;
    import java.util.regex.Matcher;

    @FunctionalInterface
    interface Operation<T> {
        T apply(T n1, T n2);
    }

    public class Calculation {

        private static final Operation<Integer> sum = (n1, n2) -> n1 + n2;
        private static final Operation<Integer> sub = (n1, n2) -> n2 - n1;

        private final Map<Character, Operation<Integer>> supportedOperations = new HashMap<>();

        Stack<Integer> numbers = new Stack<>();
        Stack<Character> operators = new Stack<>();

        public Calculation() {
            supportedOperations.put('+', sum);
            supportedOperations.put('-', sub);
        }

        public int evaluate(String exp) {
            if (!isBalanced(exp)) throw new UnbalancedExpressionException();
            Pattern isNumber = Pattern.compile("\\d");
            Pattern isOperator = Pattern.compile("[\\+\\-\\*/\\(\\)]");
            String[] tokens = exp.split("");

            for (int i = 0; i < tokens.length; i++) {
                if (tokens[i].equals(" ")) continue;

                if (isOperator.matcher(tokens[i]).matches()) {
                    char s = tokens[i].toCharArray()[0];
                    switch (s) {
                        case '(':
                            operators.push(s);
                            break;
                        case '+': case '-': case '*': case '/':
                            while (!operators.isEmpty() && checkPriority(s, operators.peek())) {
                                doSomeOperation();
                            }
                            operators.push(s);
                            break;
                        case ')':
                            while (operators.peek() != '(') {
                                doSomeOperation();
                            }
                            operators.pop();
                            break;
                    }
                    continue;
                }

                if (isNumber.matcher(tokens[i]).matches()) {
                    List<Integer> nList = new LinkedList<>();
                    while (isNumber.matcher(tokens[i]).matches()) {
                        nList.add(Integer.parseInt(tokens[i++]));
                        if (i == tokens.length) break;
                    }
                    --i;

                    int position = nList.size() - 1;
                    int number = 0;
                    for (int n : nList) {
                        int magnitude = (int) Math.pow(10, position--);
                        number += n * magnitude;
                    }
                    numbers.push(number);
                }
            }

            while (!operators.isEmpty()) {
                doSomeOperation();
            }

            if (numbers.isEmpty()) throw new UnsupportedOperationException("Invalid expression");
            return numbers.pop();
        }

        private boolean isBalanced(String exp) {
            Stack<Character> parenthesesStack = new Stack<>();
            try {
                for (char token: exp.toCharArray()) {
                    if (token == '(') parenthesesStack.push(token);
                    if (token == ')') parenthesesStack.pop();
                }
            } catch (EmptyStackException e) {
                return false;
            }
            return parenthesesStack.isEmpty();
        }

        private void doSomeOperation() {
            try {
                numbers.push(applyOperator(operators.pop(), numbers.pop(), numbers.pop()));
            } catch (EmptyStackException e) {
                throw new UnsupportedOperationException("Invalid expression");
            }
        }

        private int applyOperator(char op, int n1, int n2) {
            /*
            Calculate the desired operation.
            If this is not supported, throws an UnsupportedOperationException.
             */
            if (supportedOperations.containsKey(op)) {
                Operation<Integer> operation = supportedOperations.get(op);
                return operation.apply(n1, n2);
            }
            throw new UnsupportedOperationException();
        }

        private boolean checkPriority(char op1, char op2) {
            /*
            Checks if the first operator have arithmetic priority over second operator.
             */
            if (op2 == '(' || op2 == ')') return false;
            return (op1 != '*' && op1 != '/') || (op2 != '+' && op2 != '-');
        }
    }
  learner_created: true
- name: src/calculator/exceptions/UnsupportedOperationException.java
  visible: true
  text: |
    package calculator.exceptions;

    public class UnsupportedOperationException extends RuntimeException {
        public UnsupportedOperationException(String ... args) {
            super(args.length == 0 ? "Unsupported Operation." : args[0], null);
        }
    }
  learner_created: true
- name: src/calculator/exceptions/UnknownCommandException.java
  visible: true
  text: |
    package calculator.exceptions;

    public class UnknownCommandException extends RuntimeException {
        public UnknownCommandException() {
            super("Unknown Command.", null);
        }
    }
  learner_created: true
- name: src/calculator/ui/ICommand.java
  visible: true
  text: |
    package calculator.ui;

    public interface ICommand {
        void execute(String ... args);
    }
  learner_created: true
- name: src/calculator/Calculator.java
  visible: true
  text: |
    package calculator;

    import calculator.logic.Calculation;

    public class Calculator {

        public static void calculate(String expression) {
            Calculation calc = new Calculation();
            System.out.println(calc.evaluate(expression));
        }
    }
  learner_created: true
- name: src/calculator/exceptions/UnbalancedExpressionException.java
  visible: true
  text: |
    package calculator.exceptions;

    public class UnbalancedExpressionException extends RuntimeException {
        public UnbalancedExpressionException() {
            super("Unbalanced Expression.", null);
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/42/stages/225/implement#comment
status: Unchecked
record: -1
