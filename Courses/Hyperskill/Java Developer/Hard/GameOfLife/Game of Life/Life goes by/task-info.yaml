type: edu
custom_name: stage3
files:
- name: src/life/Main.java
  visible: true
  text: |
    package life;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/GameOfLifeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.List;


    public class GameOfLifeTest extends StageTest<String> {

        int[] sizes = {5, 6, 7, 8, 9, 10};

        @DynamicTest(data = "sizes")
        CheckResult test(int size) {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute(String.valueOf(size));

            if (output.isEmpty()) {
                return CheckResult.wrong("Looks like your output is empty!");
            }

            if (!output.toLowerCase().contains("generation")) {
                return CheckResult.wrong("Can't find 'Generation' word in the output!");
            }

            String[] generations = output.toLowerCase().split("generation");

            if (generations.length < 11) {
                return CheckResult.wrong("Your output should contain not less than 10 generations!");
            }

            List<Generation> generationsList = Generation.getGenerations(generations, size);

            Generation.isCorrectGenerationsList(generationsList);

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: test/Generation.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;
    import java.util.stream.Collectors;

    public class Generation {

        private static final Pattern pattern = Pattern.compile("alive:(\\s+)?(\\d+)", Pattern.MULTILINE);
        private final boolean[][] cells;
        private final int size;


        public Generation(List<String> lines) {

            size = lines.size();
            cells = new boolean[size][size];

            for (int i = 0; i < lines.size(); i++) {
                for (int j = 0; j < lines.size(); j++) {
                    cells[i][j] = lines.get(i).charAt(j) == 'o';
                }
            }
        }

        public static List<Generation> getGenerations(String[] generationsFromOutput, int correctSize) {

            List<Generation> generations = new ArrayList<>();

            for (int i = 1; i < generationsFromOutput.length; i++) {
                String generation = generationsFromOutput[i].toLowerCase();

                Matcher matcher = pattern.matcher(generation);

                if (!matcher.find()) {
                    throw new WrongAnswer("Can't find number of Alive cells in the generation with number "
                            + (i + 1) + ".\nYour output should contain 'Alive: DDD', where D is a digit!");
                }

                int aliveFromOutput = Integer.parseInt(matcher.group(2));

                List<String> lines = Arrays.stream(generation.split("\n"))
                        .filter(line -> !line.contains("alive") && !line.contains("#") && !line.isEmpty())
                        .collect(Collectors.toList());

                if (lines.size() != correctSize) {
                    throw new WrongAnswer("Generation #" + (i + 1) + " map size is wrong!\nYour size: " + lines.size() + "\n" +
                            "Expected size: " + correctSize);
                }

                int activeCellsInGeneration = (int) lines.stream().map(line -> line.split("")).flatMap(cells -> Arrays.stream(cells.clone())).filter(cell -> cell.equals("o")).count();

                if (activeCellsInGeneration != aliveFromOutput) {
                    throw new WrongAnswer("Active cells in the generation #" + (i + 1) + ": " + activeCellsInGeneration + "\n" +
                            "Your output: 'Alive: " + aliveFromOutput + "'");
                }

                for (String line : lines) {
                    if (line.length() != correctSize) {
                        throw new WrongAnswer("Generation map size is wrong!\nYour size: " + lines.size() + "\n" +
                                "Expected size: " + correctSize + "\nMake sure you don't print extra spaces at the end of the lines!");
                    }
                }

                generations.add(new Generation(lines));
            }

            return generations;
        }

        public boolean isCorrectNextGeneration(Generation generation) {

            if (generation.size != size) {
                return false;
            }

            for (int i = 0; i < size; i++) {
                for (int j = 0; j < size; j++) {

                    int numberOfNeighbours = 0;

                    int up = i - 1 < 0 ? size - 1 : i - 1;
                    int down = i + 1 == size ? 0 : i + 1;
                    int right = j + 1 == size ? 0 : j + 1;
                    int left = j - 1 < 0 ? size - 1 : j - 1;

                    if (cells[up][left]) numberOfNeighbours++;
                    if (cells[up][j]) numberOfNeighbours++;
                    if (cells[up][right]) numberOfNeighbours++;
                    if (cells[i][left]) numberOfNeighbours++;
                    if (cells[i][right]) numberOfNeighbours++;
                    if (cells[down][left]) numberOfNeighbours++;
                    if (cells[down][j]) numberOfNeighbours++;
                    if (cells[down][right]) numberOfNeighbours++;

                    if ((numberOfNeighbours < 2 || numberOfNeighbours > 3) && generation.cells[i][j]) {
                        return false;
                    }
                }
            }
            return true;
        }


        public static void isCorrectGenerationsList(List<Generation> generations) {

            if (generations.size() <= 1) {
                return;
            }

            for (int i = 1; i < generations.size(); i++) {
                if (!generations.get(i - 1).isCorrectNextGeneration(generations.get(i))) {
                    throw new WrongAnswer("Generation #" + (i + 1) + " is wrong!");
                }
            }
        }
    }
  learner_created: false
- name: src/life/controller/ConsoleController.java
  visible: true
  text: |
    package life.controller;

    import life.model.Game;
    import life.viewer.ConsoleViewer;

    import java.util.Scanner;

    public class ConsoleController {

        public static final Scanner scanner = new Scanner(System.in);
        private static Game gameInstance;


        public static void initialize() {
            int n = scanner.nextInt();
            int s = scanner.nextInt();
            int numberOfGens = scanner.nextInt();
            gameInstance = new Game(n, s);

            for (int i = 0; i < numberOfGens; i++) {
                gameInstance.evolve();
            }
            ConsoleViewer.showMap(gameInstance);
        }

        public static void makeStep() {
            gameInstance.evolve();
        }

        public static Game getGame() {
            return gameInstance;
        }

    }
  learner_created: true
- name: src/life/model/Game.java
  visible: true
  text: |
    package life.model;

    public class Game {

        private Generation currentGeneration;

        public Game(int mapSize, int seed) {
            currentGeneration = Generation.getInitialGeneration(mapSize, seed);
        }

        public Universe getUniverse() {
            return currentGeneration.getUniverse();
        }

        public Generation getGeneration() {
            return currentGeneration;
        }

        public void evolve() {
            currentGeneration = currentGeneration.getNextGeneration();
        }

    }
  learner_created: true
- name: src/life/viewer/ConsoleViewer.java
  visible: true
  text: |
    package life.viewer;

    import life.model.Game;
    import life.model.Generation;
    import life.model.Universe;

    public class ConsoleViewer {

        public static void showMap(Game game) {
            Generation gen = game.getGeneration();
            showMap(gen);
        }

        public static void showMap(Generation gen) {
            int len = gen.getSize();
            for (int i = 0; i < len; i++) {
                for (int j = 0; j < len; j++) {
                    System.out.printf("%s", (gen.getUniverse().getCellAt(i, j) == Universe.Cell.ALIVE) ? "O" : " ");
                }
                System.out.println();
            }
        }
    }
  learner_created: true
- name: src/life/model/Generation.java
  visible: true
  text: |
    package life.model;

    import java.util.Random;

    public class Generation {

        private Universe universe;
        private int size;
        private int seed;

        Generation(int n, int s) {
            this.size = n;
            this.seed = s;
            this.universe = new Universe(size);
        }

        public Universe getUniverse() {
            return universe;
        }

        public int getSize() {
            return size;
        }

        public int getSeed() {
            return seed;
        }

        public Generation getNextGeneration() {
            /*
            A live cell survives if it has two or three live neighbors; otherwise, it dies of boredom (<2) or overpopulation (>3).
            A dead cell is reborn if it has exactly three live neighbors.
             */
            Generation gen = new Generation(size, seed);
            gen.getUniverse().thanosAll();

            int[][] neighbors = new int[size][size];

            for (int i = 0; i < size; i++) {
                for (int j = 0; j < size; j++) {
                    neighbors[i][j] = universe.getNeighborsCount(i, j);
                }
            }

            for (int i = 0; i < size; i++) {
                for (int j = 0; j < size; j++) {
                    if (universe.getCellAt(i, j) == Universe.Cell.ALIVE) {
                        if (!(neighbors[i][j] < 2 || neighbors[i][j] > 3)) gen.universe.setCellAt(Universe.Cell.ALIVE, i, j);
                    } else {
                        if (neighbors[i][j] == 3) gen.universe.setCellAt(Universe.Cell.ALIVE, i, j);
                    }
                }
            }


            return gen;
        }

        public static Generation getInitialGeneration(int n, int s) {
            Generation gen = new Generation(n, s);
            Random randomizer = new Random(s);

            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    gen.getUniverse().setCellAt((randomizer.nextBoolean() ? Universe.Cell.ALIVE : Universe.Cell.DEAD), i, j);
                }
            }
            return gen;
        }
    }
  learner_created: true
- name: src/life/model/Universe.java
  visible: true
  text: |
    package life.model;

    import life.exceptions.UniverseOutOfIndex;

    public class Universe {

        public enum Cell { DEAD, ALIVE };
        private Cell[][] state;
        private int n;

        Universe(int n) {
            this.n = n;
            state = new Cell[n][n];
        }

        public int getNeighborsCount(int i, int j) {
            checkIndex(i, j);
            int count = 0;
            int[][] directions = {{1,0}, {-1,0}, {0,1}, {0,-1},{1,1}, {1,-1}, {-1,1}, {-1,-1}};

            for (int[] dir: directions) {
                int desiredX = i + dir[0];
                int desiredY = j + dir[1];

                int xIndex = (desiredX >= 0) ? ((desiredX < n) ? desiredX : (n - desiredX) ) : (n + desiredX);
                int yIndex = (desiredY >= 0) ? ((desiredY < n) ? desiredY : (n - desiredY) ) : (n + desiredY);
                if (getCellAt(xIndex, yIndex) == Cell.ALIVE) count++;
            }

            return count;
        }

        private void checkIndex(int i, int j) throws UniverseOutOfIndex {
            if ((i < n && j < n) && (i >= 0 && j >= 0)) return;
            throw new UniverseOutOfIndex(String.format("Oops, this is an finite universe. [%d, %d]", i, j));
        }

        public Cell getCellAt(int i, int j) throws UniverseOutOfIndex {
            checkIndex(i, j);
            return state[i][j];
        }

        public void setCellAt(Cell cell, int i, int j) throws UniverseOutOfIndex {
            checkIndex(i, j);
            state[i][j] = cell;
        }

        public void thanosAll() {
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    state[i][j] = Cell.DEAD;
                }
            }
        }
    }
  learner_created: true
- name: src/life/exceptions/UniverseOutOfIndex.java
  visible: true
  text: |
    package life.exceptions;

    public class UniverseOutOfIndex extends RuntimeException {
        public UniverseOutOfIndex(String ... message) {
            super((message.length == 0) ? "" : message[0], null);
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/54/stages/296/implement#comment
status: Unchecked
record: -1
