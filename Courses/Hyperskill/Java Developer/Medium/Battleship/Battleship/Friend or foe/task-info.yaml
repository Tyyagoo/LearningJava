type: edu
files:
- name: src/battleship/Main.java
  visible: true
  text: |
    package battleship;

    public class Main {

        public static void main(String[] args) {
            // Write your code here
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class Tests extends StageTest<String> {
        @DynamicTestingMethod
        CheckResult testExample() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!matrixIsEmpty(getFieldMatrix(output))) {
                return CheckResult.wrong("Not an empty game field at the start of the game");
            }

            // Filling the first player field
            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("F3 F7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("A1 D1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 D1");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("J7 J10").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("J10 J8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J10 J8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("B9 D8").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("B9 D9").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B9 D9");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("E6 D6").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("I2 J2").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "I2 J2");

            if (!output.toLowerCase().contains("enter")) {
                return CheckResult.wrong("No offer found to give the move to another player");
            }

            output = main.execute("");

            // Filling the second player field

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After filling the first player field, you should request the second player's " +
                    "coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("H2 H6");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H2 H6");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("F3 F6");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F6");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("H8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H8 F8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("D4 D6").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "D4 D6");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("D8 C8");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "D8 C8");

            if (!output.toLowerCase().contains("enter")) {
                return CheckResult.wrong("no offer found to give the move to another player");
            }
            output = main.execute("");

            // Players' moves
            String[] splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
            }
            if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                return CheckResult.wrong("At the start of the game the upper field should be empty");
            }
            findAllShips(getFieldMatrix(splittedOutput[1]),
                new String[]{"F3 F7", "A1 D1", "J10 J8", "B9 D9", "I2 J2"});

            output = main.execute("I3");
            if (!output.toLowerCase().contains("missed")) {
                return CheckResult.wrong("Incorrect reaction of the program if the player missed");
            }

            output = main.execute("");
            checkMissing(getFieldMatrix(output), "I3");

            splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("An incorrect number of game fields (2 should be)");
            }
            if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                return CheckResult.wrong("At the start of the game the upper field should be empty");
            }
            findAllShips(getFieldMatrix(splittedOutput[1]),
                new String[]{"H2 H6", "F3 F6", "H8 F8", "D4 D6", "D8 C8"});

            output = main.execute("C9");
            if (!output.toLowerCase().contains("hit")) {
                return CheckResult.wrong("Incorrect reaction of the program if the player hit the ship");
            }
            main.execute("");

            makeMoveTillTheEnd(main);

            return CheckResult.correct();
        }

        void makeMoveTillTheEnd(TestedProgram main) {

            String[] secondPlayerMoves = {"A1", "B1", "C1", "D1", "B9", "C9", "D9", "F3", "F4", "F5", "F6", "F7", "I2", "J2", "J8", "J9", "J10"};
            String[] firstPlayerMoves = {"D4", "D5", "D6", "C8", "D8", "F3", "F4", "F5", "F6", "F7", "D10", "E10", "F10", "G10", "J1", "J2", "J3"};

            String[][] matrix;
            String output;
            int i;

            for (i = 0; i < 3; i++) {
                main.execute(firstPlayerMoves[i]);
                main.execute("");
                main.execute(secondPlayerMoves[i]);
                main.execute("");
            }

            main.execute(firstPlayerMoves[i]);
            main.execute("");

            output = main.execute(secondPlayerMoves[i]);
            if (!output.contains("sank")) {
                throw new WrongAnswer("After a ship was sunk you should print \"You sank a ship!\" and ask to press Enter.");
            }
            output = main.execute("");

            String[] splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                throw new WrongAnswer("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
            }

            matrix = getFieldMatrix(splittedOutput[1]);
            checkShot(matrix, "A1");
            checkShot(matrix, "B1");
            checkShot(matrix, "C1");
            checkShot(matrix, "D1");

            for (i = i + 1; i < secondPlayerMoves.length - 1; i++) {
                main.execute(firstPlayerMoves[i]);
                main.execute("");
                main.execute(secondPlayerMoves[i]);
                main.execute("");
            }

            main.execute(firstPlayerMoves[i]);
            main.execute("");
            output = main.execute(secondPlayerMoves[i]).toLowerCase();

            if (!output.contains("won") || !output.contains("congratulations")) {
                throw new WrongAnswer("If a player has sunk all enemy ships you should print:\n" +
                    "\"You sank the last ship. You won. Congratulations!\"");
            }
        }

        void findShipByCoordinates(String[][] matrix, String coordinates) {
            int[] coordinatesInt = parseCoordinates(coordinates);

            if (coordinatesInt[0] > coordinatesInt[2]) {
                int swap = coordinatesInt[0];
                coordinatesInt[0] = coordinatesInt[2];
                coordinatesInt[2] = swap;
            } else if (coordinatesInt[1] > coordinatesInt[3]) {
                int swap = coordinatesInt[1];
                coordinatesInt[1] = coordinatesInt[3];
                coordinatesInt[3] = swap;
            }

            if (coordinatesInt[0] == coordinatesInt[2]) {
                int cord = coordinatesInt[0];
                for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
                    if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
                    }
                }
            } else {
                int cord = coordinatesInt[1];
                for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
                    if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
                    }
                }
            }
        }

        boolean matrixIsEmpty(String[][] matrix) {
            for (String[] strings : matrix) {
                for (int j = 0; j < matrix.length; j++) {
                    if (!strings[j].trim().equals("~")) {
                        return false;
                    }
                }
            }
            return true;
        }

        void checkShot(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("x")) {
                throw new WrongAnswer("Expected hit in \"" + coordinate + "\".");
            }
        }

        boolean checkMissing(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            return matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("m");
        }

        int[] parseCoordinates(String coordinatesString) {
            String[] splittedCoords = coordinatesString.split(" ");
            int[] parsedCoordinates = new int[4];

            parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
            parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
            parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
            parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;

            return parsedCoordinates;
        }

        int charToInt(String charCoordinate) {
            charCoordinate = charCoordinate.toLowerCase();
            char character = charCoordinate.charAt(0);
            return (int) character - (int) 'a';
        }

        String[][] getFieldMatrix(String output) {

            WrongAnswer cantParseException = new WrongAnswer("Can't parse the game field\n" +
                "Make sure you print it like in examples!");

            String[] splittedOutput = output.split("\n");
            String[][] matrix = new String[10][10];

            try {
                int index = 0;
                while (!(splittedOutput[index].contains("1") &&
                    splittedOutput[index].contains("2") &&
                    splittedOutput[index].contains("10"))) {
                    index++;
                    if (index > 1000) {
                        throw cantParseException;
                    }
                }
                index++;

                for (int i = 0; i < 10; i++) {
                    String temp = splittedOutput[index].substring(2).trim();
                    String[] splittedLine = temp.trim().split(" ");
                    if (splittedLine.length != 10) {
                        throw cantParseException;
                    }
                    matrix[i] = splittedLine;
                    index++;
                }
            } catch (IndexOutOfBoundsException ignored) {
                throw cantParseException;
            }

            return matrix;
        }

        boolean isGameFieldPrinted(String output) {
            return output.contains("1") && output.contains("2") && output.contains("10");
        }

        void findAllShips(String[][] matrix, String[] coordinates) {
            for (String item : coordinates) {
                findShipByCoordinates(matrix, item);
            }
        }
    }
  learner_created: false
- name: src/battleship/Vector2.java
  visible: true
  text: |
    package battleship;

    public class Vector2 {

        private int x;
        private int y;

        public static Vector2 getVectorByCoordinates(String coordinates) {
            int number = Integer.parseInt(coordinates.substring(1));
            int letter = (int) coordinates.charAt(0) - 64;

            if (number > 10 || number < 1) throw new IllegalArgumentException();
            if (letter > 10 || letter < 1) throw new IllegalArgumentException();

            return new Vector2(letter, number);
        }

        public static boolean equals(Vector2 v1, Vector2 v2) {
            if (v1 == null || v2 == null) return false;
            if (v1.getX() == v2.getX() && v1.getY() == v2.getY()) return true;
            return false;
        }

        Vector2(int x, int y) {
            this.x = x;
            this.y = y;
        }

        public int getMagnitude(Vector2 to) {
            int magnitude = 0;

            if (x == to.getX()) {
                magnitude = 1 + Math.abs(y - to.getY());
            }
            else if (y == to.getY()) {
                magnitude = 1 + Math.abs(x - to.getX());
            }

            else {
                throw new IllegalArgumentException();
            }

            return magnitude;
        }

        public void setX(int x) {
            if (x > 10) return;
            this.x = x;
        }

        public void setY(int y) {
            if (y > 10) return;
            this.y = y;
        }

        public int getX() {
            return x;
        }

        public int getY() {
            return y;
        }
    }
  learner_created: true
- name: src/battleship/ShipFactory.java
  visible: true
  text: |
    package battleship;

    import battleship.Exceptions.InvalidShipSizeException;
    import battleship.Ships.*;
    import battleship.Exceptions.InvalidShipException;


    public class ShipFactory {

        public static AbstractShip makeShip(String shipName, Vector2 from, Vector2 to) throws InvalidShipException{
            AbstractShip ship;
            Position position = new Position(from, to);
            switch (shipName) {
                case AircraftCarrier.name:
                    ship = new AircraftCarrier(position);
                    break;
                case Battleship.name:
                    ship = new Battleship(position);
                    break;
                case Submarine.name:
                    ship = new Submarine(position);
                    break;
                case Cruiser.name:
                    ship = new Cruiser(position);
                    break;
                case Destroyer.name:
                    ship = new Destroyer(position);
                    break;
                default:
                    throw new InvalidShipException(shipName);
            }
            return ship;
        }

        public static int getShipSizeByName(String shipName) throws InvalidShipException {
            int size = 0;
            switch (shipName) {
                case AircraftCarrier.name:
                    size = AircraftCarrier.size;
                    break;
                case Battleship.name:
                    size = Battleship.size;
                    break;
                case Submarine.name:
                    size = Submarine.size;
                    break;
                case Cruiser.name:
                    size = Cruiser.size;
                    break;
                case Destroyer.name:
                    size = Destroyer.size;
                    break;
                default:
                    throw new InvalidShipException(shipName);
            }
            return size;
        }
    }
  learner_created: true
- name: src/battleship/Exceptions/ShotOnDestroyedShipException.java
  visible: true
  text: |
    package battleship.Exceptions;

    public class ShotOnDestroyedShipException extends RuntimeException {
        public ShotOnDestroyedShipException() {
            super("", null);
        }
    }
  learner_created: true
- name: src/battleship/Ships/AircraftCarrier.java
  visible: true
  text: |
    package battleship.Ships;

    import battleship.Position;
    import battleship.Vector2;

    public class AircraftCarrier extends AbstractShip{

        public static final String name = "Aircraft Carrier";
        public static final int size = 5;

        public AircraftCarrier(Position position) {
            super(position);
        }

        public AircraftCarrier(Vector2 from, Vector2 to) {
            super(from, to);
        }

        @Override
        public String getName() {
            return name;
        }

        @Override
        public int getSize() {
            return size;
        }
    }
  learner_created: true
- name: src/battleship/Ships/Submarine.java
  visible: true
  text: |
    package battleship.Ships;

    import battleship.Position;
    import battleship.Vector2;

    public class Submarine extends AbstractShip{

        public static final String name = "Submarine";
        public static final int size = 3;

        public Submarine(Position position) {
            super(position);
        }

        public Submarine(Vector2 from, Vector2 to) {
            super(from, to);
        }

        @Override
        public String getName() {
            return name;
        }

        @Override
        public int getSize() {
            return size;
        }
    }
  learner_created: true
- name: src/battleship/UserInterface.java
  visible: true
  text: |
    package battleship;

    import battleship.Exceptions.*;
    import battleship.Ships.AbstractShip;

    import java.io.IOException;
    import java.util.*;

    public class UserInterface {

        private static Scanner scanner = new Scanner(System.in);


        public static void startGame(Player player1, Player player2) {
            setupPlayerBattlefield(player1);
            setupPlayerBattlefield(player2);
            System.out.println("The game starts!");

            while (true) {
                // player 1 turn
                makeTurn(player1, player2);
                if (player2.getBattlefield().isAllShipsDestroyed()) {
                    System.out.printf("%s has won the game!%n", player1.name);
                    break;
                }
                makeTurn(player2, player1);
                if (player1.getBattlefield().isAllShipsDestroyed()) {
                    System.out.printf("%s has won the game!%n", player2.name);
                }
            }
        }

        public static void setupPlayerBattlefield(Player player) {
            System.out.println(String.format("%s, place your ships on the game field", player.name));
            player.buildBattlefield();
            promptEnterKey();
        }

        public static void promptEnterKey() {
            System.out.println("Press Enter and pass the move to another player");
            try {
                System.in.read();
            } catch (IOException e) {
                e.printStackTrace();
            }
            System.out.println("\n".repeat(99));
        }

        public static void makeTurn(Player player, Player enemy) {
            enemy.getBattlefield().showField();
            System.out.println("---------------------");
            player.getBattlefield().showField(true);
            System.out.printf("%s, it's your turn:%n", player.name);
            makeTurn(enemy.getBattlefield());
        }

        public static void makeTurn(Battlefield battlefield) {
            String inputLine = getInputCoordinates();
            Vector2 shootCoordinate;
            while(true){
                try {
                    shootCoordinate = Vector2.getVectorByCoordinates(inputLine);
                    break;
                } catch (IllegalArgumentException e) {
                    System.out.println("Error! You entered the wrong coordinates! Try again:");
                    inputLine = scanner.nextLine();
                }
            }
            boolean shootResult;
            try {
                shootResult = battlefield.shootOnCoordinate(shootCoordinate);
                //battlefield.showField();
                System.out.println((shootResult) ? "You hit a ship!" : "You missed!");
            } catch (ShipSankedException e) {
                //battlefield.showField();
                if (battlefield.isAllShipsDestroyed()) {
                    System.out.println("You sank the last ship. You won. Congratulations!");
                } else {
                    System.out.println(e.getMessage());
                }
            } catch (ShotOnDestroyedShipException e) {
                //battlefield.showField();
            }

            promptEnterKey();
        }

        private static String getInputCoordinates() {
            return scanner.nextLine();
        }

        private static String[] getInputPosition() {
            return scanner.nextLine().split(" ");
        }

        public static void placeShipOnBattlefield(String shipName, Battlefield battlefield) {
            askToPlaceShip(shipName, battlefield);
        }

        private static void askToPlaceShip(String shipName, Battlefield battlefield) {

            System.out.printf("Enter the coordinates of the %s (%d cells):%n", shipName, ShipFactory.getShipSizeByName(shipName));
            System.out.println();

            while(true) {
                try {
                    String[] inputLine = getInputPosition();
                    askToPlaceShip(shipName, inputLine, battlefield);
                    break;
                } catch (RuntimeException e) {
                    System.out.println(e.getMessage());
                }
            }
        }

        private static void askToPlaceShip(String shipName, String[] coordinates, Battlefield battlefield)
                throws InvalidShipLocationException, InvalidShipSizeException, TooCloseShipsException, InvalidShipException{
            Vector2 startPosition = Vector2.getVectorByCoordinates(coordinates[0]);
            Vector2 endPosition = Vector2.getVectorByCoordinates(coordinates[1]);

            try {
                int magnitude = startPosition.getMagnitude(endPosition);
                if (magnitude == ShipFactory.getShipSizeByName(shipName)) {
                    if (battlefield.scanForEmptyPosition(startPosition, endPosition)) {
                        AbstractShip ship = ShipFactory.makeShip(shipName, startPosition, endPosition);
                        battlefield.placeShip(ship);
                        return;
                    } else {
                        throw new TooCloseShipsException();
                    }
                } else {
                    throw new InvalidShipSizeException(shipName);
                }
            } catch (IllegalArgumentException e) {
                throw new InvalidShipLocationException();
            }
        }

    }
  learner_created: true
- name: src/battleship/Ships/Cruiser.java
  visible: true
  text: |
    package battleship.Ships;

    import battleship.Position;
    import battleship.Vector2;

    public class Cruiser extends AbstractShip {

        public static final String name = "Cruiser";
        public static final int size = 3;

        public Cruiser(Position position) {
            super(position);
        }

        public Cruiser(Vector2 from, Vector2 to) {
            super(from, to);
        }

        @Override
        public String getName() {
            return name;
        }

        @Override
        public int getSize() {
            return size;
        }
    }
  learner_created: true
- name: src/battleship/Position.java
  visible: true
  text: |
    package battleship;

    public class Position {

        private Vector2 from;
        private Vector2 to;

        public Position(Vector2 from, Vector2 to) {
            this.from = from;
            this.to = to;
        }

        public Vector2 getFrom() {
            return from;
        }

        public Vector2 getTo() {
            return to;
        }
    }
  learner_created: true
- name: src/battleship/Player.java
  visible: true
  text: |
    package battleship;

    public class Player {

        public final String name;
        private Battlefield battlefield = new Battlefield();

        Player(String name) {
            this.name = name;
        }

        public void buildBattlefield() {
            String[] namesOfShips = {"Aircraft Carrier", "Battleship", "Submarine", "Cruiser", "Destroyer"};

            for(String shipName: namesOfShips) {
                battlefield.showField(true);
                UserInterface.placeShipOnBattlefield(shipName, battlefield);
            }
            battlefield.showField(true);
        }

        public Battlefield getBattlefield() {
            return battlefield;
        }
    }
  learner_created: true
- name: src/battleship/Battlefield.java
  visible: true
  text: |
    package battleship;

    import battleship.Exceptions.ShipSankedException;
    import battleship.Exceptions.ShotOnDestroyedShipException;
    import battleship.Ships.AbstractShip;

    import java.util.*;

    public class Battlefield {

        public static final int xSize = 10;
        public static final int ySize = 10;

        enum Tiles {
            NONE('~', '~'),
            SHIP('~', 'O'),
            DESTROYED_SHIP('X', 'X'),
            MISSED_SHOOT('M', 'M');

            private final char withFogCharacter;
            private final char withoutFogCharacter;

            Tiles(char fog, char withoutFog) {
                this.withFogCharacter = fog;
                this.withoutFogCharacter = withoutFog;
            }

            public char getWithFogCharacter() {
                return withFogCharacter;
            }

            public char getWithoutFogCharacter() {
                return withoutFogCharacter;
            }
        }

        private Tiles[][] field = new Tiles[xSize][ySize];
        private Map<AbstractShip, List<Vector2>> aliveShips = new HashMap<>();

        Battlefield() {
            for (int i = 0; i < xSize; i++) {
                for (int j = 0; j < ySize; j++) {
                    field[i][j] = Tiles.NONE;
                }
            }
        }

        public boolean checkSurroundings(int i, int j) {
            boolean isEmpty = true;
            int[][] directions = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
            for (int c = 0; c < 4; c++) {
                try {
                    if (field[i - directions[c][0]][j - directions[c][1]] == Tiles.SHIP) {
                        isEmpty = false;
                        break;
                    }
                } catch (ArrayIndexOutOfBoundsException ignored) {}
            }
            return isEmpty;
        }

        public boolean scanForEmptyPosition(Vector2 begin, Vector2 end) {
            int magnitude = begin.getMagnitude(end);
            boolean isEmpty = true;

            if (begin.getX() == end.getX()) {
                for (int i = Math.min(begin.getY(), end.getY()) - 1; i < Math.max(begin.getY(), end.getY()); i++) {
                    if (field[begin.getX() - 1][i] == Tiles.SHIP) {
                        isEmpty = false;
                        break;
                    }
                    isEmpty = checkSurroundings(begin.getX() - 1, i);
                    if (!isEmpty) break;
                }
            } else {
                for (int i = Math.min(begin.getX(), end.getX()) - 1; i < Math.max(begin.getX(), end.getX()); i++) {
                    if (field[i][begin.getY() - 1] == Tiles.SHIP) {
                        isEmpty = false;
                        break;
                    }
                    isEmpty = checkSurroundings(i, begin.getY() - 1);
                    if (!isEmpty) break;
                }
            }

            return isEmpty;
        }

        public boolean shootOnCoordinate(Vector2 coordinates) throws ShipSankedException, ShotOnDestroyedShipException {
            Tiles tileAtPosition = field[coordinates.getX() - 1][coordinates.getY() - 1];
            boolean rightShoot = false;
            if (tileAtPosition == Tiles.SHIP) {
                field[coordinates.getX() - 1][coordinates.getY() - 1] = Tiles.DESTROYED_SHIP;
                rightShoot = true;
                AbstractShip hittedShip = getShipAtCoordinate(coordinates);
                if (hittedShip != null) {
                    boolean shipIsDestroyed = true;
                    for (Vector2 v: aliveShips.getOrDefault(hittedShip, new ArrayList<Vector2>())) {
                        if (field[v.getX() - 1][v.getY() - 1] == Tiles.SHIP) {
                            shipIsDestroyed = false;
                        }
                    }
                    if (shipIsDestroyed) {
                        aliveShips.remove(hittedShip);
                        throw new ShipSankedException();
                    }
                }
            } else if (tileAtPosition == Tiles.DESTROYED_SHIP) {
                throw new ShotOnDestroyedShipException();
            } else {
                field[coordinates.getX() - 1][coordinates.getY() - 1] = Tiles.MISSED_SHOOT;
            }

            return rightShoot;
        }

        public void placeShip(AbstractShip ship) {
            List<Vector2> listOfPositions = new ArrayList<>();
            Vector2 begin = ship.getPosition().getFrom();
            Vector2 end = ship.getPosition().getTo();
            if (begin.getX() == end.getX()) {
                for (int i = Math.min(begin.getY(), end.getY()) - 1; i < Math.max(begin.getY(), end.getY()); i++) {
                    field[begin.getX() - 1][i] = Tiles.SHIP;

                    listOfPositions.add(new Vector2(begin.getX(), i + 1));
                }
            } else {
                for (int i = Math.min(begin.getX(), end.getX()) - 1; i < Math.max(begin.getX(), end.getX()); i++) {
                    field[i][begin.getY() - 1] = Tiles.SHIP;
                    listOfPositions.add(new Vector2(i + 1, begin.getY()));
                }
            }

            aliveShips.put(ship, listOfPositions);
        }

        public void showField(boolean ...cancelFog) {

            System.out.print("  ");
            for (int c = 1; c <= 10; c++){
                System.out.print(c + " ");
            }
            System.out.println();

            char[] lettersArray = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'};
            for (int i = 0; i < xSize; i++) {
                System.out.print(String.format("%s ", lettersArray[i]));
                for (int j = 0; j < ySize; j++) {
                    if (cancelFog.length != 0) {
                        if (cancelFog[0]) {
                            System.out.print(field[i][j].getWithoutFogCharacter() + " ");
                            continue;
                        }
                    }
                    System.out.print(field[i][j].getWithFogCharacter() + " ");
                }
                System.out.println();
            }
        }

        public boolean isAllShipsDestroyed() {
            if (aliveShips.isEmpty()) return true;
            return false;
        }

        private AbstractShip getShipAtCoordinate(Vector2 coordinate) {
            for (Map.Entry<AbstractShip, List<Vector2>> entry: aliveShips.entrySet()) {
                for (Vector2 v: entry.getValue()) {
                    if (Vector2.equals(coordinate, v)) return entry.getKey();
                }
            }
            return null;
        }
    }
  learner_created: true
- name: src/battleship/Exceptions/InvalidShipSizeException.java
  visible: true
  text: |
    package battleship.Exceptions;

    public class InvalidShipSizeException  extends RuntimeException{
        public InvalidShipSizeException(String shipName) {
            super(String.format("Error! Wrong length of the %s! Try again:", shipName), null);
        }
    }
  learner_created: true
- name: src/battleship/Exceptions/InvalidShipLocationException.java
  visible: true
  text: |
    package battleship.Exceptions;

    public class InvalidShipLocationException extends RuntimeException{
        public InvalidShipLocationException() {
            super("Error! Wrong ship location! Try again:", null);
        }
    }
  learner_created: true
- name: src/battleship/Ships/Destroyer.java
  visible: true
  text: |
    package battleship.Ships;

    import battleship.Position;
    import battleship.Vector2;

    public class Destroyer extends AbstractShip {

        public static final String name = "Destroyer";
        public static final int size = 2;

        public Destroyer(Position position) {
            super(position);
        }

        public Destroyer(Vector2 from, Vector2 to) {
            super(from, to);
        }

        @Override
        public String getName() {
            return name;
        }

        @Override
        public int getSize() {
            return size;
        }
    }
  learner_created: true
- name: src/battleship/Ships/AbstractShip.java
  visible: true
  text: |
    package battleship.Ships;

    import battleship.Position;
    import battleship.Vector2;

    public abstract class AbstractShip {

        private Position position;

        public abstract String getName();
        public abstract int getSize();

        public AbstractShip(Position position) {
            this.position = position;
        }

        public AbstractShip(Vector2 from, Vector2 to) {
            this.position = new Position(from, to);
        }

        public Position getPosition() {
            return position;
        }
    }
  learner_created: true
- name: src/battleship/Exceptions/TooCloseShipsException.java
  visible: true
  text: |
    package battleship.Exceptions;


    public class TooCloseShipsException extends RuntimeException {
        public TooCloseShipsException() {
            super("Error! You placed it too close to another one. Try again:", null);
        }
    }
  learner_created: true
- name: src/battleship/Ships/Battleship.java
  visible: true
  text: |
    package battleship.Ships;

    import battleship.Position;
    import battleship.Vector2;

    public class Battleship extends AbstractShip{

        public static final String name = "Battleship";
        public static final int size = 4;

        public Battleship(Position position) {
            super(position);
        }

        public Battleship(Vector2 from, Vector2 to) {
            super(from, to);
        }

        @Override
        public String getName() {
            return name;
        }

        @Override
        public int getSize() {
            return size;
        }
    }
  learner_created: true
- name: src/battleship/Exceptions/InvalidShipException.java
  visible: true
  text: |
    package battleship.Exceptions;

    public class InvalidShipException extends RuntimeException {

        public InvalidShipException(String shipName) {
            super(String.format("'%s' isn't a valid ship.", shipName), null);
        }
    }
  learner_created: true
- name: src/battleship/Exceptions/ShipSankedException.java
  visible: true
  text: |
    package battleship.Exceptions;

    public class ShipSankedException extends RuntimeException {

        public ShipSankedException() {
            super("You sank a ship! Specify a new target:", null);
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/125/stages/667/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Fri, 09 Jul 2021 00:23:50 UTC
record: -1
